{
  "address": "0xe162f7f5f4833Bb93777e8C1E3e20607447A21cf",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newName",
          "type": "string"
        }
      ],
      "name": "NameChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSkill",
          "type": "uint256"
        }
      ],
      "name": "SkillChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BATCH_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PURCHASE_SIZE_SETTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME_SETTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SALE_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SALE_STAGES_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SKILL_SETTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchEndId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "addBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "endTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weiPerToken",
          "type": "uint256"
        }
      ],
      "name": "addSaleStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nfts",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchIndex",
          "type": "uint256"
        }
      ],
      "name": "deleteBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getBatch",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "endId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string"
            }
          ],
          "internalType": "struct Collection.Batch",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleStageIndex",
          "type": "uint256"
        }
      ],
      "name": "getSaleStage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weiPerToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getSkill",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "name": "getTotalPriceFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPurchaseSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleStagesLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPurchaseSize",
          "type": "uint256"
        }
      ],
      "name": "setMaxPurchaseSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newName",
          "type": "string"
        }
      ],
      "name": "setName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleStageIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weiPerToken",
          "type": "uint256"
        }
      ],
      "name": "setSaleStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newSkill",
          "type": "uint256"
        }
      ],
      "name": "setSkill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "start",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaea5413edce0f223bccfb9a6f6787ae11d5a398664c291868708894f1c967d02",
  "receipt": {
    "to": null,
    "from": "0xfd1A9aa11b2A7c9555D50f2bA4B1d1B723dCe59e",
    "contractAddress": "0xe162f7f5f4833Bb93777e8C1E3e20607447A21cf",
    "transactionIndex": 5,
    "gasUsed": "3347637",
    "logsBloom": "0x
    "blockHash": "0x7b7e1510572630da4be5c986569d3715b7a85a11d92572f3e8f069c1bd621f84",
    "transactionHash": "0xaea5413edce0f223bccfb9a6f6787ae11d5a398664c291868708894f1c967d02",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 8728145,
        "transactionHash": "0xaea5413edce0f223bccfb9a6f6787ae11d5a398664c291868708894f1c967d02",
        "address": "0xe162f7f5f4833Bb93777e8C1E3e20607447A21cf",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fd1a9aa11b2a7c9555d50f2ba4b1d1b723dce59e",
          "0x000000000000000000000000fd1a9aa11b2a7c9555d50f2ba4b1d1b723dce59e"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x7b7e1510572630da4be5c986569d3715b7a85a11d92572f3e8f069c1bd621f84"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 8728145,
        "transactionHash": "0xaea5413edce0f223bccfb9a6f6787ae11d5a398664c291868708894f1c967d02",
        "address": "0xe162f7f5f4833Bb93777e8C1E3e20607447A21cf",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9aa164dc2052fa9a9eebee383f6617f557e14a8d068430567e50f1ac8348fdaa",
          "0x000000000000000000000000fd1a9aa11b2a7c9555d50f2ba4b1d1b723dce59e",
          "0x000000000000000000000000fd1a9aa11b2a7c9555d50f2ba4b1d1b723dce59e"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x7b7e1510572630da4be5c986569d3715b7a85a11d92572f3e8f069c1bd621f84"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 8728145,
        "transactionHash": "0xaea5413edce0f223bccfb9a6f6787ae11d5a398664c291868708894f1c967d02",
        "address": "0xe162f7f5f4833Bb93777e8C1E3e20607447A21cf",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x28eb28c26cbbd48a6bfad016505ccf4a189452995f59d16217af8920961ed25c",
          "0x000000000000000000000000fd1a9aa11b2a7c9555d50f2ba4b1d1b723dce59e",
          "0x000000000000000000000000fd1a9aa11b2a7c9555d50f2ba4b1d1b723dce59e"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x7b7e1510572630da4be5c986569d3715b7a85a11d92572f3e8f069c1bd621f84"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 8728145,
        "transactionHash": "0xaea5413edce0f223bccfb9a6f6787ae11d5a398664c291868708894f1c967d02",
        "address": "0xe162f7f5f4833Bb93777e8C1E3e20607447A21cf",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x27a0624e64a794e52337524177801654db9a21fcd4c18d902036cf6ff01b0159",
          "0x000000000000000000000000fd1a9aa11b2a7c9555d50f2ba4b1d1b723dce59e",
          "0x000000000000000000000000fd1a9aa11b2a7c9555d50f2ba4b1d1b723dce59e"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x7b7e1510572630da4be5c986569d3715b7a85a11d92572f3e8f069c1bd621f84"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 8728145,
        "transactionHash": "0xaea5413edce0f223bccfb9a6f6787ae11d5a398664c291868708894f1c967d02",
        "address": "0xe162f7f5f4833Bb93777e8C1E3e20607447A21cf",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xadb1f90fb043c84ed13cea91e76d7bc7af0bfa59ad8c7e6c623c30a52b8f20a6",
          "0x000000000000000000000000fd1a9aa11b2a7c9555d50f2ba4b1d1b723dce59e",
          "0x000000000000000000000000fd1a9aa11b2a7c9555d50f2ba4b1d1b723dce59e"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x7b7e1510572630da4be5c986569d3715b7a85a11d92572f3e8f069c1bd621f84"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 8728145,
        "transactionHash": "0xaea5413edce0f223bccfb9a6f6787ae11d5a398664c291868708894f1c967d02",
        "address": "0xe162f7f5f4833Bb93777e8C1E3e20607447A21cf",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xde99de62ff13877bfb32892f85138aa338f091ce421c1d80a3ed7cbd389e8090",
          "0x000000000000000000000000fd1a9aa11b2a7c9555d50f2ba4b1d1b723dce59e",
          "0x000000000000000000000000fd1a9aa11b2a7c9555d50f2ba4b1d1b723dce59e"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x7b7e1510572630da4be5c986569d3715b7a85a11d92572f3e8f069c1bd621f84"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 8728145,
        "transactionHash": "0xaea5413edce0f223bccfb9a6f6787ae11d5a398664c291868708894f1c967d02",
        "address": "0xe162f7f5f4833Bb93777e8C1E3e20607447A21cf",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0ed873f8f88e98a22713f460360c003876e6ccc2d975a1273a13ab57840b3ead",
          "0x000000000000000000000000fd1a9aa11b2a7c9555d50f2ba4b1d1b723dce59e",
          "0x000000000000000000000000fd1a9aa11b2a7c9555d50f2ba4b1d1b723dce59e"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x7b7e1510572630da4be5c986569d3715b7a85a11d92572f3e8f069c1bd621f84"
      }
    ],
    "blockNumber": 8728145,
    "cumulativeGasUsed": "4155479",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "a016aa9f8bf27ca3693fd5292328d5e4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"NameChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSkill\",\"type\":\"uint256\"}],\"name\":\"SkillChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BATCH_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PURCHASE_SIZE_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SALE_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SALE_STAGES_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SKILL_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchEndId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"addBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weiPerToken\",\"type\":\"uint256\"}],\"name\":\"addSaleStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nfts\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchIndex\",\"type\":\"uint256\"}],\"name\":\"deleteBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getBatch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"endId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"internalType\":\"struct Collection.Batch\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleStageIndex\",\"type\":\"uint256\"}],\"name\":\"getSaleStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weiPerToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSkill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"getTotalPriceFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPurchaseSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleStagesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPurchaseSize\",\"type\":\"uint256\"}],\"name\":\"setMaxPurchaseSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleStageIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weiPerToken\",\"type\":\"uint256\"}],\"name\":\"setSaleStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSkill\",\"type\":\"uint256\"}],\"name\":\"setSkill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getName(uint256)\":{\"details\":\"Returns name of the NFT at index\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getSkill(uint256)\":{\"details\":\"Returns skill of the NFT at index\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setMaxPurchaseSize(uint256)\":{\"details\":\"Change max purchase size.\"},\"setName(uint256,string)\":{\"details\":\"Change token name\"},\"setSkill(uint256,uint256)\":{\"details\":\"Change token skill\"},\"start()\":{\"details\":\"Starts sale\"},\"stop()\":{\"details\":\"Stops sale\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addBatch(uint256,string)\":{\"notice\":\"Add tokens batch to batches array\"},\"addSaleStage(uint256,uint256)\":{\"notice\":\"Adds new sale stage with given params at the end of `saleStages array`.\"},\"buy(uint256)\":{\"notice\":\"Method to purchase and get random available NFTs.\"},\"deleteBatch(uint256)\":{\"notice\":\"Removes batch at the given index\"},\"getBatch(uint256)\":{\"notice\":\"Return token batch URI\"},\"getSaleStage(uint256)\":{\"notice\":\"Returns info about sale stage with given index.\"},\"getTotalPriceFor(uint256)\":{\"notice\":\"Returns summary price for given number of tokens.\"},\"maxTotalSupply()\":{\"notice\":\"Returns current `_maxTotalSupply` value.\"},\"saleStagesLength()\":{\"notice\":\"Returns current `_saleStages` array length.\"},\"setSaleStage(uint256,uint256,uint256)\":{\"notice\":\"Rewrites sale stage properties with given index.\"},\"tokenURI(uint256)\":{\"notice\":\"Return tokenURI\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Collection.sol\":\"Collection\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                Strings.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                Strings.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98fac37221212c8f126f198d262a4df86394bd1a9969f61e40739fe8ac013dd8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId\\n            || interfaceId == type(IERC721Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0x2d9f9af8b84d252e0e7ee716e4cb3ad1b58f3ec6619e4f54f40d4b5e28f75eb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x3dce5847e70c056ef0f7cf91cb9a0067cf90784794017a45c1211cde7ed1c08c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xccb7e6475afcb1c5cb13b3fbf1329c10b93620a9b66393388066683915271a78\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/Collection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract Collection is ERC721Enumerable, AccessControl {\\n    event NameChange (uint256 indexed index, string newName);\\n    event SkillChange (uint256 indexed index, uint256 newSkill);\\n    mapping(uint256 => string) private _tokenName;\\n    mapping(uint256 => uint256) private _tokenSkill;\\n\\n    bool public saleActive = false;\\n\\n    using SafeMath for uint256;\\n    using Strings for uint256;\\n\\n    // Sale Stage Info struct\\n    struct SaleStage {\\n        uint256 endTokens;\\n        uint256 weiPerToken;\\n    }\\n    struct Batch {\\n        uint256 endId;\\n        string baseURI;\\n    }\\n\\n    // Array of heroes batches\\n    Batch[] internal _batches;\\n    // Array of sale stages\\n    SaleStage[] internal _saleStages;\\n    // Maximum allowed tokenSupply boundary. Can be extended by adding new stages.\\n    uint256 internal _maxTotalSupply = 0;\\n    // Max NFTs that can be bought at once.\\n    uint256 public maxPurchaseSize = 20;\\n    // Role with add & set sale stages permissions\\n    bytes32 public constant SALE_STAGES_MANAGER_ROLE = keccak256(\\\"SALE_STAGES_MANAGER_ROLE\\\");\\n    // Role with add & delete permissions\\n    bytes32 public constant BATCH_MANAGER_ROLE = keccak256(\\\"BATCH_MANAGER_ROLE\\\");\\n    bytes32 public constant SALE_ADMIN_ROLE = keccak256(\\\"SALE_ADMIN_ROLE\\\");\\n    bytes32 public constant NAME_SETTER_ROLE = keccak256(\\\"NAME_SETTER_ROLE\\\");\\n    bytes32 public constant SKILL_SETTER_ROLE = keccak256(\\\"SKILL_SETTER_ROLE\\\");\\n    bytes32 public constant MAX_PURCHASE_SIZE_SETTER_ROLE = keccak256(\\\"MAX_PURCHASE_SIZE_SETTER_ROLE\\\");\\n\\n    constructor() ERC721(\\\"CyberPunk\\\", \\\"CPN\\\") {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(SALE_STAGES_MANAGER_ROLE, _msgSender());\\n        _setupRole(BATCH_MANAGER_ROLE, _msgSender());\\n        _setupRole(SALE_ADMIN_ROLE, _msgSender());\\n        _setupRole(NAME_SETTER_ROLE, _msgSender());\\n        _setupRole(SKILL_SETTER_ROLE, _msgSender());\\n        _setupRole(MAX_PURCHASE_SIZE_SETTER_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Enumerable, AccessControl) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice Returns current `_maxTotalSupply` value.\\n     */\\n    function maxTotalSupply() public virtual view returns (uint256) {\\n        return _maxTotalSupply;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer incl. minting\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        // check maxTotalSupply is not exceeded on mint\\n        if (from == address(0)) {\\n            require(totalSupply() <= _maxTotalSupply, \\\"Collection: maxSupply achieved\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns current `_saleStages` array length.\\n     */\\n    function saleStagesLength() public view returns (uint256) {\\n        return _saleStages.length;\\n    }\\n\\n    /**\\n     * @notice Returns info about sale stage with given index.\\n     */\\n    function getSaleStage(uint256 saleStageIndex)\\n        public\\n        view\\n        returns (\\n            uint256 startTokens,\\n            uint256 endTokens,\\n            uint256 weiPerToken\\n        )\\n    {\\n        require(_saleStages.length > 0, \\\"getSaleStage: no stages\\\");\\n\\n        if (0 == saleStageIndex) {\\n            SaleStage memory saleStage = _saleStages[saleStageIndex];\\n            return (0, saleStage.endTokens, saleStage.weiPerToken);\\n        } else {\\n            SaleStage memory previousSaleStage = _saleStages[saleStageIndex.sub(1)];\\n            SaleStage memory saleStage = _saleStages[saleStageIndex];\\n            return (previousSaleStage.endTokens, saleStage.endTokens, saleStage.weiPerToken);\\n        }\\n    }\\n\\n    /**\\n     * @notice Return token batch URI\\n     */\\n    function getBatch(uint256 tokenId) public view returns (Batch memory) {\\n        require(_batches.length > 0, \\\"getBatch: no batches\\\");\\n        require(\\n            tokenId < _batches[_batches.length - 1].endId,\\n            \\\"getBatch: tokenId must be less then last token id in batches array\\\"\\n        );\\n\\n        for (uint256 i; i < _batches.length; i++) {\\n            if (tokenId > _batches[i].endId) {\\n                continue;\\n            } else {\\n                return _batches[i];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Return tokenURI\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        string memory baseURI = getBatch(tokenId).baseURI;\\n\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(\\n                    abi.encodePacked(baseURI, \\\"/\\\", tokenId.toString(), \\\".json\\\")\\n                )\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * @notice Add tokens batch to batches array\\n     */\\n    function addBatch(uint256 batchEndId, string memory baseURI)\\n    external\\n    onlyRole(BATCH_MANAGER_ROLE)\\n        {\\n        uint256 batchesLength = _batches.length;\\n\\n        require(batchEndId > 0, \\\"addBatch: batch endTokens must be non-zero\\\");\\n        if (batchesLength > 0) {\\n            require(\\n                batchEndId > _batches[batchesLength - 1].endId,\\n                \\\"addBatch: batchEndId must be greater than the endId of the last batch\\\"\\n            );\\n        }\\n\\n        _batches.push(Batch(batchEndId, baseURI));\\n    }\\n\\n    /**\\n     * @notice Removes batch at the given index\\n     */\\n    function deleteBatch(uint256 batchIndex)\\n    external\\n    onlyRole(BATCH_MANAGER_ROLE)\\n        {\\n        require(\\n            _batches.length > batchIndex,\\n            \\\"deleteBatch: index out of batches length\\\"\\n        );\\n        delete _batches[batchIndex];\\n    }\\n\\n    /**\\n     * @notice Adds new sale stage with given params at the end of `saleStages array`.\\n     */\\n    function addSaleStage(uint256 endTokens, uint256 weiPerToken)\\n        external\\n        onlyRole(SALE_STAGES_MANAGER_ROLE)\\n    {\\n        require(weiPerToken > 0, \\\"addSaleStage: weiPerToken must be non-zero\\\");\\n        uint256 saleStagesLength = _saleStages.length;\\n        if (0 == saleStagesLength) {\\n            require(endTokens > 0, \\\"addSaleStage: first stage endTokens must be non-zero\\\");\\n        }\\n        else {\\n            (,uint256 currentSaleStageEndTokens,) = getSaleStage(saleStagesLength.sub(1));\\n            require(endTokens > currentSaleStageEndTokens, \\\"addSaleStage: new endTokens must be more than current last\\\");\\n        }\\n\\n        _saleStages.push(SaleStage(endTokens, weiPerToken));\\n        _maxTotalSupply = endTokens;\\n    }\\n\\n    /**\\n     * @notice Rewrites sale stage properties with given index.\\n     */\\n    function setSaleStage(uint256 saleStageIndex, uint256 endTokens, uint256 weiPerToken)\\n        external\\n        onlyRole(SALE_STAGES_MANAGER_ROLE)\\n    {\\n        uint256 saleStagesLength = _saleStages.length;\\n        require(saleStageIndex < saleStagesLength, \\\"setSaleStage: saleStage with this index does not exist\\\");\\n        require(weiPerToken > 0, \\\"setSaleStage: weiPerToken must be non-zero\\\");\\n\\n        (uint256 previousSaleStageEndTokens,,) = getSaleStage(saleStageIndex);\\n        require(endTokens > previousSaleStageEndTokens, \\\"setSaleStage: new endTokens must be more than in previous stage\\\");\\n\\n        if (saleStageIndex.add(1) < saleStagesLength) {\\n            (,uint256 nextSaleStageEndTokens,) = getSaleStage(saleStageIndex.add(1));\\n            require(endTokens > nextSaleStageEndTokens, \\\"setSaleStage: new endTokens must be less than in next stage\\\");\\n        }\\n\\n        _saleStages[saleStageIndex] = SaleStage(endTokens, weiPerToken);\\n    }\\n\\n    /**\\n     * @notice Returns summary price for given number of tokens.\\n     */\\n    function getTotalPriceFor(uint256 tokens) public view returns (uint256) {\\n        uint256 saleStagesLength = _saleStages.length;\\n        uint256 totalSupply = totalSupply();\\n        uint256 tokensLeft = tokens;\\n\\n        uint256 totalPrice = 0;\\n        uint256 tokensDiff;\\n\\n        SaleStage memory saleStage;\\n        for (uint256 i = 0; i < saleStagesLength; i++) {\\n            saleStage = _saleStages[i];\\n            if (totalSupply > saleStage.endTokens)\\n                continue;\\n            tokensDiff = (saleStage.endTokens).sub(totalSupply);\\n            if (tokensLeft > 0) {\\n                if (tokensLeft > tokensDiff) {\\n                    totalPrice = totalPrice.add(tokensDiff.mul(saleStage.weiPerToken));\\n                    tokensLeft = tokensLeft.sub(tokensDiff);\\n                    totalSupply = totalSupply.add(tokensDiff);\\n                }\\n                else {\\n                    totalPrice = totalPrice.add(tokensLeft.mul(saleStage.weiPerToken));\\n                    tokensLeft = 0;\\n                    totalSupply = totalSupply.add(tokensLeft);\\n                }\\n            }\\n            else {\\n                break;\\n            }\\n        }\\n        return totalPrice;\\n    }\\n\\n    /**\\n     * @notice Method to purchase and get random available NFTs.\\n     */\\n    function buy(uint256 nfts) public payable {\\n        require(totalSupply() < _maxTotalSupply, \\\"buy: Sale has already ended\\\");\\n        require(nfts > 0, \\\"buy: nfts cannot be 0\\\");\\n        require(nfts <= maxPurchaseSize, \\\"buy: You can not buy more than maxPurchaseSize NFTs at once\\\");\\n        require(totalSupply().add(nfts) <= _maxTotalSupply, \\\"buy: Exceeds _maxTotalSupply\\\");\\n        require(getTotalPriceFor(nfts) == msg.value, \\\"buy: Ether value sent is not correct\\\");\\n\\n        for (uint i = 0; i < nfts; i++) {\\n            uint256 mintIndex = _getRandomAvailableIndex();\\n            _safeMint(msg.sender, mintIndex);\\n        }\\n    }\\n\\n    /**\\n     * @dev Pseudo-random index generator. Returns new free of owner token index.\\n     */\\n    function _getRandomAvailableIndex() internal view returns (uint256) {\\n        uint256 index = (\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        block.timestamp, /* solhint-disable not-rely-on-time */\\n                        gasleft(),\\n                        blockhash(block.number - 1)\\n                    )\\n                )\\n            ) % _maxTotalSupply\\n        );\\n        while (_exists(index)) {\\n            index += 1;\\n            if (index >= _maxTotalSupply) {\\n                index = 0;\\n            }\\n        }\\n        return index;\\n    }\\n\\n    /**\\n     * @dev Returns name of the NFT at index\\n     */\\n    function getName(uint256 index) public view returns (string memory) {\\n        return _tokenName[index];\\n    }\\n\\n    /**\\n     * @dev Returns skill of the NFT at index\\n     */\\n    function getSkill(uint256 index) public view returns (uint256) {\\n                return _tokenSkill[index];\\n    }\\n\\n    /**\\n     * @dev Starts sale\\n     */\\n    function start() public onlyRole(SALE_ADMIN_ROLE) {\\n        saleActive = true;\\n    }\\n\\n    /**\\n     * @dev Stops sale\\n     */\\n    function stop() public onlyRole(SALE_ADMIN_ROLE) {\\n        saleActive = false;\\n    }\\n\\n    /**\\n     * @dev Change token name\\n     */\\n    function setName(uint256 id, string memory newName) public onlyRole(NAME_SETTER_ROLE) {\\n        _tokenName[id] = newName;\\n        emit NameChange(id, newName);\\n    }\\n\\n    /**\\n     * @dev Change token skill\\n     */\\n    function setSkill(uint256 id, uint256 newSkill) public onlyRole(SKILL_SETTER_ROLE) {\\n        _tokenSkill[id] = newSkill;\\n        emit SkillChange(id, newSkill);\\n    }\\n\\n     /**\\n     * @dev Change max purchase size.\\n     */\\n    function setMaxPurchaseSize(uint256 newPurchaseSize) public onlyRole(MAX_PURCHASE_SIZE_SETTER_ROLE) {\\n        maxPurchaseSize = newPurchaseSize;\\n    }\\n}\\n\",\"keccak256\":\"0x964cab076e92d3499f4a2e1ce15ec21e72441557b29b4c554e8b2b4a82b72951\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600d805460ff19169055600060105560146011553480156200002557600080fd5b506040805180820182526009815268437962657250756e6b60b81b60208083019182528351808501909452600384526221a82760e91b90840152815191929162000072916000916200025c565b508051620000889060019060208401906200025c565b506200009a91506000905033620001a8565b620000c67f9aa164dc2052fa9a9eebee383f6617f557e14a8d068430567e50f1ac8348fdaa33620001a8565b620000f27f28eb28c26cbbd48a6bfad016505ccf4a189452995f59d16217af8920961ed25c33620001a8565b6200011e7f27a0624e64a794e52337524177801654db9a21fcd4c18d902036cf6ff01b015933620001a8565b6200014a7fadb1f90fb043c84ed13cea91e76d7bc7af0bfa59ad8c7e6c623c30a52b8f20a633620001a8565b620001767fde99de62ff13877bfb32892f85138aa338f091ce421c1d80a3ed7cbd389e809033620001a8565b620001a27f0ed873f8f88e98a22713f460360c003876e6ccc2d975a1273a13ab57840b3ead33620001a8565b6200033f565b620001b48282620001b8565b5050565b6000828152600a602090815260408083206001600160a01b038516845290915290205460ff16620001b4576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620002183390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b8280546200026a9062000302565b90600052602060002090601f0160209004810192826200028e5760008555620002d9565b82601f10620002a957805160ff1916838001178555620002d9565b82800160010185558215620002d9579182015b82811115620002d9578251825591602001919060010190620002bc565b50620002e7929150620002eb565b5090565b5b80821115620002e75760008155600101620002ec565b600181811c908216806200031757607f821691505b602082108114156200033957634e487b7160e01b600052602260045260246000fd5b50919050565b6136f7806200034f6000396000f3fe6080604052600436106102885760003560e01c806368428a1b1161015a578063bd880fae116100c1578063d96a094a1161007a578063d96a094a1461082f578063dd5b5a2e14610842578063e5ca564814610876578063e985e9c51461088b578063ee77a14d146108d4578063fe55932a1461090857600080fd5b8063bd880fae14610759578063be9a655514610786578063c87b56dd1461079b578063d06b1da8146107bb578063d547741f146107db578063d57a46f6146107fb57600080fd5b806395d89b411161011357806395d89b41146106af578063a217fddf146106c4578063a22cb465146106d9578063a5515c33146106f9578063b423f0a614610719578063b88d4fde1461073957600080fd5b806368428a1b146105f55780636b8ff5741461060f57806370a082311461062f57806382dd1b1a1461064f5780638d07df8f1461066f57806391d148541461068f57600080fd5b8063248a9ca3116101fe5780634f1afc4e116101b75780634f1afc4e146104f95780634f6ccce714610519578063573aa7d5146105395780635ac44282146105745780636080eb5c146105a15780636352211e146105d557600080fd5b8063248a9ca3146104345780632ab4d052146104645780632f2ff15d146104795780632f745c591461049957806336568abe146104b957806342842e0e146104d957600080fd5b8063095ea7b311610250578063095ea7b3146103575780630f50d8131461037757806314b710ae146103ab57806318160ddd146103cb5780631979db31146103e057806323b872dd1461041457600080fd5b806301ffc9a71461028d57806306fdde03146102c2578063076736a2146102e457806307da68f514610308578063081812fc1461031f575b600080fd5b34801561029957600080fd5b506102ad6102a836600461327d565b610928565b60405190151581526020015b60405180910390f35b3480156102ce57600080fd5b506102d7610939565b6040516102b99190613485565b3480156102f057600080fd5b506102fa60115481565b6040519081526020016102b9565b34801561031457600080fd5b5061031d6109cb565b005b34801561032b57600080fd5b5061033f61033a366004613243565b610a03565b6040516001600160a01b0390911681526020016102b9565b34801561036357600080fd5b5061031d61037236600461321a565b610a9d565b34801561038357600080fd5b506102fa7f28eb28c26cbbd48a6bfad016505ccf4a189452995f59d16217af8920961ed25c81565b3480156103b757600080fd5b5061031d6103c6366004613243565b610bb3565b3480156103d757600080fd5b506008546102fa565b3480156103ec57600080fd5b506102fa7f0ed873f8f88e98a22713f460360c003876e6ccc2d975a1273a13ab57840b3ead81565b34801561042057600080fd5b5061031d61042f36600461312c565b610be4565b34801561044057600080fd5b506102fa61044f366004613243565b6000908152600a602052604090206001015490565b34801561047057600080fd5b506010546102fa565b34801561048557600080fd5b5061031d61049436600461325b565b610c15565b3480156104a557600080fd5b506102fa6104b436600461321a565b610c3b565b3480156104c557600080fd5b5061031d6104d436600461325b565b610cd1565b3480156104e557600080fd5b5061031d6104f436600461312c565b610d4f565b34801561050557600080fd5b5061031d61051436600461332e565b610d6a565b34801561052557600080fd5b506102fa610534366004613243565b610fe7565b34801561054557600080fd5b50610559610554366004613243565b611088565b604080519384526020840192909252908201526060016102b9565b34801561058057600080fd5b5061059461058f366004613243565b611207565b6040516102b9919061353b565b3480156105ad57600080fd5b506102fa7f9aa164dc2052fa9a9eebee383f6617f557e14a8d068430567e50f1ac8348fdaa81565b3480156105e157600080fd5b5061033f6105f0366004613243565b611463565b34801561060157600080fd5b50600d546102ad9060ff1681565b34801561061b57600080fd5b506102d761062a366004613243565b6114da565b34801561063b57600080fd5b506102fa61064a3660046130e0565b61157c565b34801561065b57600080fd5b5061031d61066a36600461330d565b611603565b34801561067b57600080fd5b5061031d61068a3660046132b5565b611814565b34801561069b57600080fd5b506102ad6106aa36600461325b565b6119f7565b3480156106bb57600080fd5b506102d7611a22565b3480156106d057600080fd5b506102fa600081565b3480156106e557600080fd5b5061031d6106f43660046131e0565b611a31565b34801561070557600080fd5b506102fa610714366004613243565b611af6565b34801561072557600080fd5b5061031d61073436600461330d565b611c43565b34801561074557600080fd5b5061031d610754366004613167565b611cc0565b34801561076557600080fd5b506102fa610774366004613243565b6000908152600c602052604090205490565b34801561079257600080fd5b5061031d611cf8565b3480156107a757600080fd5b506102d76107b6366004613243565b611d33565b3480156107c757600080fd5b5061031d6107d6366004613243565b611d96565b3480156107e757600080fd5b5061031d6107f636600461325b565b611e64565b34801561080757600080fd5b506102fa7fde99de62ff13877bfb32892f85138aa338f091ce421c1d80a3ed7cbd389e809081565b61031d61083d366004613243565b611e8a565b34801561084e57600080fd5b506102fa7f27a0624e64a794e52337524177801654db9a21fcd4c18d902036cf6ff01b015981565b34801561088257600080fd5b50600f546102fa565b34801561089757600080fd5b506102ad6108a63660046130fa565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156108e057600080fd5b506102fa7fadb1f90fb043c84ed13cea91e76d7bc7af0bfa59ad8c7e6c623c30a52b8f20a681565b34801561091457600080fd5b5061031d6109233660046132b5565b612098565b600061093382612113565b92915050565b60606000805461094890613605565b80601f016020809104026020016040519081016040528092919081815260200182805461097490613605565b80156109c15780601f10610996576101008083540402835291602001916109c1565b820191906000526020600020905b8154815290600101906020018083116109a457829003601f168201915b5050505050905090565b7f27a0624e64a794e52337524177801654db9a21fcd4c18d902036cf6ff01b01596109f68133612138565b50600d805460ff19169055565b6000818152600260205260408120546001600160a01b0316610a815760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610aa882611463565b9050806001600160a01b0316836001600160a01b03161415610b165760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610a78565b336001600160a01b0382161480610b325750610b3281336108a6565b610ba45760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610a78565b610bae838361219c565b505050565b7f0ed873f8f88e98a22713f460360c003876e6ccc2d975a1273a13ab57840b3ead610bde8133612138565b50601155565b610bee338261220a565b610c0a5760405162461bcd60e51b8152600401610a78906134ea565b610bae838383612301565b6000828152600a6020526040902060010154610c318133612138565b610bae83836124ac565b6000610c468361157c565b8210610ca85760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610a78565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6001600160a01b0381163314610d415760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a78565b610d4b8282612532565b5050565b610bae83838360405180602001604052806000815250611cc0565b7f9aa164dc2052fa9a9eebee383f6617f557e14a8d068430567e50f1ac8348fdaa610d958133612138565b600f54808510610e065760405162461bcd60e51b815260206004820152603660248201527f73657453616c6553746167653a2073616c6553746167652077697468207468696044820152751cc81a5b99195e08191bd95cc81b9bdd08195e1a5cdd60521b6064820152608401610a78565b60008311610e695760405162461bcd60e51b815260206004820152602a60248201527f73657453616c6553746167653a20776569506572546f6b656e206d757374206260448201526965206e6f6e2d7a65726f60b01b6064820152608401610a78565b6000610e7486611088565b50509050808511610eed5760405162461bcd60e51b815260206004820152603f60248201527f73657453616c6553746167653a206e657720656e64546f6b656e73206d75737460448201527f206265206d6f7265207468616e20696e2070726576696f7573207374616765006064820152608401610a78565b81610ef9876001612599565b1015610f8a576000610f0f610554886001612599565b50915050808611610f885760405162461bcd60e51b815260206004820152603b60248201527f73657453616c6553746167653a206e657720656e64546f6b656e73206d75737460448201527f206265206c657373207468616e20696e206e65787420737461676500000000006064820152608401610a78565b505b604051806040016040528086815260200185815250600f8781548110610fc057634e487b7160e01b600052603260045260246000fd5b60009182526020918290208351600290920201908155910151600190910155505050505050565b6000610ff260085490565b82106110555760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610a78565b6008828154811061107657634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b600080600080600f80549050116110e15760405162461bcd60e51b815260206004820152601760248201527f67657453616c6553746167653a206e6f207374616765730000000000000000006044820152606401610a78565b83611144576000600f858154811061110957634e487b7160e01b600052603260045260246000fd5b600091825260208083206040805180820190915260029093020180548084526001909101549290910182905291955090935091506112009050565b6000600f6111538660016125a5565b8154811061117157634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016040518060400160405290816000820154815260200160018201548152505090506000600f86815481106111c357634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080518082019091526002909202018054808352600190910154919092018190529251955093509091506112009050565b9193909250565b604080518082019091526000815260606020820152600e546112625760405162461bcd60e51b815260206004820152601460248201527367657442617463683a206e6f206261746368657360601b6044820152606401610a78565b600e8054611272906001906135ab565b8154811061129057634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016000015482106113215760405162461bcd60e51b815260206004820152604260248201527f67657442617463683a20746f6b656e4964206d757374206265206c657373207460448201527f68656e206c61737420746f6b656e20696420696e206261746368657320617272606482015261617960f01b608482015260a401610a78565b60005b600e5481101561145d57600e818154811061134f57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016000015483111561136d5761144b565b600e818154811061138e57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201604051806040016040529081600082015481526020016001820180546113c190613605565b80601f01602080910402602001604051908101604052809291908181526020018280546113ed90613605565b801561143a5780601f1061140f5761010080835404028352916020019161143a565b820191906000526020600020905b81548152906001019060200180831161141d57829003601f168201915b505050505081525050915050919050565b806114558161363a565b915050611324565b50919050565b6000818152600260205260408120546001600160a01b0316806109335760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610a78565b6000818152600b602052604090208054606091906114f790613605565b80601f016020809104026020016040519081016040528092919081815260200182805461152390613605565b80156115705780601f1061154557610100808354040283529160200191611570565b820191906000526020600020905b81548152906001019060200180831161155357829003601f168201915b50505050509050919050565b60006001600160a01b0382166115e75760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610a78565b506001600160a01b031660009081526003602052604090205490565b7f9aa164dc2052fa9a9eebee383f6617f557e14a8d068430567e50f1ac8348fdaa61162e8133612138565b600082116116915760405162461bcd60e51b815260206004820152602a60248201527f61646453616c6553746167653a20776569506572546f6b656e206d757374206260448201526965206e6f6e2d7a65726f60b01b6064820152608401610a78565b600f548061170b57600084116117065760405162461bcd60e51b815260206004820152603460248201527f61646453616c6553746167653a20666972737420737461676520656e64546f6b604482015273656e73206d757374206265206e6f6e2d7a65726f60601b6064820152608401610a78565b611796565b600061171b6105548360016125a5565b509150508085116117945760405162461bcd60e51b815260206004820152603a60248201527f61646453616c6553746167653a206e657720656e64546f6b656e73206d75737460448201527f206265206d6f7265207468616e2063757272656e74206c6173740000000000006064820152608401610a78565b505b50506040805180820190915282815260208101918252600f805460018101825560009190915290517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80260029092029182015590517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80390910155601055565b7f28eb28c26cbbd48a6bfad016505ccf4a189452995f59d16217af8920961ed25c61183f8133612138565b600e54836118a25760405162461bcd60e51b815260206004820152602a60248201527f61646442617463683a20626174636820656e64546f6b656e73206d757374206260448201526965206e6f6e2d7a65726f60b01b6064820152608401610a78565b801561196757600e6118b56001836135ab565b815481106118d357634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016000015484116119675760405162461bcd60e51b815260206004820152604560248201527f61646442617463683a206261746368456e644964206d7573742062652067726560448201527f61746572207468616e2074686520656e644964206f6620746865206c617374206064820152640c4c2e8c6d60db1b608482015260a401610a78565b604080518082019091528481526020808201858152600e8054600181018255600091909152835160029091027fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd81019182559151805191936119ee937fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fe0192910190612f7d565b50505050505050565b6000918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60606001805461094890613605565b6001600160a01b038216331415611a8a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610a78565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600f5460009081611b0660085490565b90506000849050600080611b2d604051806040016040528060008152602001600081525090565b60005b86811015611c3657600f8181548110611b5957634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016040518060400160405290816000820154815260200160018201548152505091508160000151861115611b9957611c24565b8151611ba590876125a5565b92508415611c1f5782851115611bf557611bd6611bcf8360200151856125b190919063ffffffff16565b8590612599565b9350611be285846125a5565b9450611bee8684612599565b9550611c24565b611c0f611bcf8360200151876125b190919063ffffffff16565b600095509350611bee8686612599565b611c36565b80611c2e8161363a565b915050611b30565b5091979650505050505050565b7fde99de62ff13877bfb32892f85138aa338f091ce421c1d80a3ed7cbd389e8090611c6e8133612138565b6000838152600c6020526040908190208390555183907fbc118caef5b83a02ad5f988c3550437e355b0c3e999d65e0652177448b97c88690611cb39085815260200190565b60405180910390a2505050565b611cca338361220a565b611ce65760405162461bcd60e51b8152600401610a78906134ea565b611cf2848484846125bd565b50505050565b7f27a0624e64a794e52337524177801654db9a21fcd4c18d902036cf6ff01b0159611d238133612138565b50600d805460ff19166001179055565b60606000611d4083611207565b6020015190506000815111611d645760405180602001604052806000815250611d8f565b80611d6e846125f0565b604051602001611d7f929190613385565b6040516020818303038152906040525b9392505050565b7f28eb28c26cbbd48a6bfad016505ccf4a189452995f59d16217af8920961ed25c611dc18133612138565b600e548210611e235760405162461bcd60e51b815260206004820152602860248201527f64656c65746542617463683a20696e646578206f7574206f66206261746368656044820152670e640d8cadccee8d60c31b6064820152608401610a78565b600e8281548110611e4457634e487b7160e01b600052603260045260246000fd5b60009182526020822060029091020181815590611cf26001830182613001565b6000828152600a6020526040902060010154611e808133612138565b610bae8383612532565b60105460085410611edd5760405162461bcd60e51b815260206004820152601b60248201527f6275793a2053616c652068617320616c726561647920656e64656400000000006044820152606401610a78565b60008111611f255760405162461bcd60e51b815260206004820152601560248201527406275793a206e6674732063616e6e6f74206265203605c1b6044820152606401610a78565b601154811115611f9d5760405162461bcd60e51b815260206004820152603b60248201527f6275793a20596f752063616e206e6f7420627579206d6f7265207468616e206d60448201527f6178507572636861736553697a65204e465473206174206f6e636500000000006064820152608401610a78565b601054611fb382611fad60085490565b90612599565b11156120015760405162461bcd60e51b815260206004820152601c60248201527f6275793a2045786365656473205f6d6178546f74616c537570706c79000000006044820152606401610a78565b3461200b82611af6565b146120645760405162461bcd60e51b8152602060048201526024808201527f6275793a2045746865722076616c75652073656e74206973206e6f7420636f726044820152631c9958dd60e21b6064820152608401610a78565b60005b81811015610d4b57600061207961270a565b9050612085338261279f565b50806120908161363a565b915050612067565b7fadb1f90fb043c84ed13cea91e76d7bc7af0bfa59ad8c7e6c623c30a52b8f20a66120c38133612138565b6000838152600b6020908152604090912083516120e292850190612f7d565b50827f7e632a301794d8d4a81ea7e20f37d1947158d36e66403af04ba85dd194b66f1b83604051611cb39190613485565b60006001600160e01b03198216637965db0b60e01b14806109335750610933826127b9565b61214282826119f7565b610d4b5761215a816001600160a01b031660146127de565b6121658360206127de565b6040516020016121769291906133d3565b60408051601f198184030181529082905262461bcd60e51b8252610a7891600401613485565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906121d182611463565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166122835760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610a78565b600061228e83611463565b9050806001600160a01b0316846001600160a01b031614806122c95750836001600160a01b03166122be84610a03565b6001600160a01b0316145b806122f957506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661231482611463565b6001600160a01b03161461237c5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610a78565b6001600160a01b0382166123de5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610a78565b6123e98383836129c0565b6123f460008261219c565b6001600160a01b038316600090815260036020526040812080546001929061241d9084906135ab565b90915550506001600160a01b038216600090815260036020526040812080546001929061244b908490613560565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6124b682826119f7565b610d4b576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff191660011790556124ee3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61253c82826119f7565b15610d4b576000828152600a602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000611d8f8284613560565b6000611d8f82846135ab565b6000611d8f828461358c565b6125c8848484612301565b6125d484848484612a2d565b611cf25760405162461bcd60e51b8152600401610a7890613498565b6060816126145750506040805180820190915260018152600360fc1b602082015290565b8160005b811561263e57806126288161363a565b91506126379050600a83613578565b9150612618565b60008167ffffffffffffffff81111561266757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612691576020820181803683370190505b5090505b84156122f9576126a66001836135ab565b91506126b3600a86613655565b6126be906030613560565b60f81b8183815181106126e157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350612703600a86613578565b9450612695565b600080601054425a61271d6001436135ab565b6040805160208101949094528301919091524060608201526080016040516020818303038152906040528051906020012060001c61275b9190613655565b90505b6000818152600260205260409020546001600160a01b03161561279a57612786600182613560565b90506010548110612795575060005b61275e565b919050565b610d4b828260405180602001604052806000815250612b3a565b60006001600160e01b0319821663780e9d6360e01b1480610933575061093382612b6d565b606060006127ed83600261358c565b6127f8906002613560565b67ffffffffffffffff81111561281e57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612848576020820181803683370190505b509050600360fc1b8160008151811061287157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106128ae57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006128d284600261358c565b6128dd906001613560565b90505b6001811115612971576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061291f57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061294357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361296a816135ee565b90506128e0565b508315611d8f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a78565b6129cb838383612bbd565b6001600160a01b038316610bae576010546008541115610bae5760405162461bcd60e51b815260206004820152601e60248201527f436f6c6c656374696f6e3a206d6178537570706c7920616368696576656400006044820152606401610a78565b60006001600160a01b0384163b15612b2f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612a71903390899088908890600401613448565b602060405180830381600087803b158015612a8b57600080fd5b505af1925050508015612abb575060408051601f3d908101601f19168201909252612ab891810190613299565b60015b612b15573d808015612ae9576040519150601f19603f3d011682016040523d82523d6000602084013e612aee565b606091505b508051612b0d5760405162461bcd60e51b8152600401610a7890613498565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506122f9565b506001949350505050565b612b448383612c75565b612b516000848484612a2d565b610bae5760405162461bcd60e51b8152600401610a7890613498565b60006001600160e01b031982166380ac58cd60e01b1480612b9e57506001600160e01b03198216635b5e139f60e01b145b8061093357506301ffc9a760e01b6001600160e01b0319831614610933565b6001600160a01b038316612c1857612c1381600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612c3b565b816001600160a01b0316836001600160a01b031614612c3b57612c3b8382612dc3565b6001600160a01b038216612c5257610bae81612e60565b826001600160a01b0316826001600160a01b031614610bae57610bae8282612f39565b6001600160a01b038216612ccb5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610a78565b6000818152600260205260409020546001600160a01b031615612d305760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610a78565b612d3c600083836129c0565b6001600160a01b0382166000908152600360205260408120805460019290612d65908490613560565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001612dd08461157c565b612dda91906135ab565b600083815260076020526040902054909150808214612e2d576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090612e72906001906135ab565b60008381526009602052604081205460088054939450909284908110612ea857634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060088381548110612ed757634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612f1d57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000612f448361157c565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054612f8990613605565b90600052602060002090601f016020900481019282612fab5760008555612ff1565b82601f10612fc457805160ff1916838001178555612ff1565b82800160010185558215612ff1579182015b82811115612ff1578251825591602001919060010190612fd6565b50612ffd92915061303e565b5090565b50805461300d90613605565b6000825580601f1061301d575050565b601f01602090049060005260206000209081019061303b919061303e565b50565b5b80821115612ffd576000815560010161303f565b600067ffffffffffffffff8084111561306e5761306e613695565b604051601f8501601f19908116603f0116810190828211818310171561309657613096613695565b816040528093508581528686860111156130af57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b038116811461279a57600080fd5b6000602082840312156130f1578081fd5b611d8f826130c9565b6000806040838503121561310c578081fd5b613115836130c9565b9150613123602084016130c9565b90509250929050565b600080600060608486031215613140578081fd5b613149846130c9565b9250613157602085016130c9565b9150604084013590509250925092565b6000806000806080858703121561317c578081fd5b613185856130c9565b9350613193602086016130c9565b925060408501359150606085013567ffffffffffffffff8111156131b5578182fd5b8501601f810187136131c5578182fd5b6131d487823560208401613053565b91505092959194509250565b600080604083850312156131f2578182fd5b6131fb836130c9565b91506020830135801515811461320f578182fd5b809150509250929050565b6000806040838503121561322c578182fd5b613235836130c9565b946020939093013593505050565b600060208284031215613254578081fd5b5035919050565b6000806040838503121561326d578182fd5b82359150613123602084016130c9565b60006020828403121561328e578081fd5b8135611d8f816136ab565b6000602082840312156132aa578081fd5b8151611d8f816136ab565b600080604083850312156132c7578182fd5b82359150602083013567ffffffffffffffff8111156132e4578182fd5b8301601f810185136132f4578182fd5b61330385823560208401613053565b9150509250929050565b6000806040838503121561331f578182fd5b50508035926020909101359150565b600080600060608486031215613342578081fd5b505081359360208301359350604090920135919050565b600081518084526133718160208601602086016135c2565b601f01601f19169290920160200192915050565b600083516133978184602088016135c2565b602f60f81b90830190815283516133b58160018401602088016135c2565b64173539b7b760d91b60019290910191820152600601949350505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161340b8160178501602088016135c2565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161343c8160288401602088016135c2565b01602801949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061347b90830184613359565b9695505050505050565b602081526000611d8f6020830184613359565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020815281516020820152600060208301516040808401526122f96060840182613359565b6000821982111561357357613573613669565b500190565b6000826135875761358761367f565b500490565b60008160001904831182151516156135a6576135a6613669565b500290565b6000828210156135bd576135bd613669565b500390565b60005b838110156135dd5781810151838201526020016135c5565b83811115611cf25750506000910152565b6000816135fd576135fd613669565b506000190190565b600181811c9082168061361957607f821691505b6020821081141561145d57634e487b7160e01b600052602260045260246000fd5b600060001982141561364e5761364e613669565b5060010190565b6000826136645761366461367f565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461303b57600080fdfea26469706673582212202ef604f8f9af573c88531f1f99e6a0e58ba0717ed206c37d54f7202345c94f5764736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106102885760003560e01c806368428a1b1161015a578063bd880fae116100c1578063d96a094a1161007a578063d96a094a1461082f578063dd5b5a2e14610842578063e5ca564814610876578063e985e9c51461088b578063ee77a14d146108d4578063fe55932a1461090857600080fd5b8063bd880fae14610759578063be9a655514610786578063c87b56dd1461079b578063d06b1da8146107bb578063d547741f146107db578063d57a46f6146107fb57600080fd5b806395d89b411161011357806395d89b41146106af578063a217fddf146106c4578063a22cb465146106d9578063a5515c33146106f9578063b423f0a614610719578063b88d4fde1461073957600080fd5b806368428a1b146105f55780636b8ff5741461060f57806370a082311461062f57806382dd1b1a1461064f5780638d07df8f1461066f57806391d148541461068f57600080fd5b8063248a9ca3116101fe5780634f1afc4e116101b75780634f1afc4e146104f95780634f6ccce714610519578063573aa7d5146105395780635ac44282146105745780636080eb5c146105a15780636352211e146105d557600080fd5b8063248a9ca3146104345780632ab4d052146104645780632f2ff15d146104795780632f745c591461049957806336568abe146104b957806342842e0e146104d957600080fd5b8063095ea7b311610250578063095ea7b3146103575780630f50d8131461037757806314b710ae146103ab57806318160ddd146103cb5780631979db31146103e057806323b872dd1461041457600080fd5b806301ffc9a71461028d57806306fdde03146102c2578063076736a2146102e457806307da68f514610308578063081812fc1461031f575b600080fd5b34801561029957600080fd5b506102ad6102a836600461327d565b610928565b60405190151581526020015b60405180910390f35b3480156102ce57600080fd5b506102d7610939565b6040516102b99190613485565b3480156102f057600080fd5b506102fa60115481565b6040519081526020016102b9565b34801561031457600080fd5b5061031d6109cb565b005b34801561032b57600080fd5b5061033f61033a366004613243565b610a03565b6040516001600160a01b0390911681526020016102b9565b34801561036357600080fd5b5061031d61037236600461321a565b610a9d565b34801561038357600080fd5b506102fa7f28eb28c26cbbd48a6bfad016505ccf4a189452995f59d16217af8920961ed25c81565b3480156103b757600080fd5b5061031d6103c6366004613243565b610bb3565b3480156103d757600080fd5b506008546102fa565b3480156103ec57600080fd5b506102fa7f0ed873f8f88e98a22713f460360c003876e6ccc2d975a1273a13ab57840b3ead81565b34801561042057600080fd5b5061031d61042f36600461312c565b610be4565b34801561044057600080fd5b506102fa61044f366004613243565b6000908152600a602052604090206001015490565b34801561047057600080fd5b506010546102fa565b34801561048557600080fd5b5061031d61049436600461325b565b610c15565b3480156104a557600080fd5b506102fa6104b436600461321a565b610c3b565b3480156104c557600080fd5b5061031d6104d436600461325b565b610cd1565b3480156104e557600080fd5b5061031d6104f436600461312c565b610d4f565b34801561050557600080fd5b5061031d61051436600461332e565b610d6a565b34801561052557600080fd5b506102fa610534366004613243565b610fe7565b34801561054557600080fd5b50610559610554366004613243565b611088565b604080519384526020840192909252908201526060016102b9565b34801561058057600080fd5b5061059461058f366004613243565b611207565b6040516102b9919061353b565b3480156105ad57600080fd5b506102fa7f9aa164dc2052fa9a9eebee383f6617f557e14a8d068430567e50f1ac8348fdaa81565b3480156105e157600080fd5b5061033f6105f0366004613243565b611463565b34801561060157600080fd5b50600d546102ad9060ff1681565b34801561061b57600080fd5b506102d761062a366004613243565b6114da565b34801561063b57600080fd5b506102fa61064a3660046130e0565b61157c565b34801561065b57600080fd5b5061031d61066a36600461330d565b611603565b34801561067b57600080fd5b5061031d61068a3660046132b5565b611814565b34801561069b57600080fd5b506102ad6106aa36600461325b565b6119f7565b3480156106bb57600080fd5b506102d7611a22565b3480156106d057600080fd5b506102fa600081565b3480156106e557600080fd5b5061031d6106f43660046131e0565b611a31565b34801561070557600080fd5b506102fa610714366004613243565b611af6565b34801561072557600080fd5b5061031d61073436600461330d565b611c43565b34801561074557600080fd5b5061031d610754366004613167565b611cc0565b34801561076557600080fd5b506102fa610774366004613243565b6000908152600c602052604090205490565b34801561079257600080fd5b5061031d611cf8565b3480156107a757600080fd5b506102d76107b6366004613243565b611d33565b3480156107c757600080fd5b5061031d6107d6366004613243565b611d96565b3480156107e757600080fd5b5061031d6107f636600461325b565b611e64565b34801561080757600080fd5b506102fa7fde99de62ff13877bfb32892f85138aa338f091ce421c1d80a3ed7cbd389e809081565b61031d61083d366004613243565b611e8a565b34801561084e57600080fd5b506102fa7f27a0624e64a794e52337524177801654db9a21fcd4c18d902036cf6ff01b015981565b34801561088257600080fd5b50600f546102fa565b34801561089757600080fd5b506102ad6108a63660046130fa565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156108e057600080fd5b506102fa7fadb1f90fb043c84ed13cea91e76d7bc7af0bfa59ad8c7e6c623c30a52b8f20a681565b34801561091457600080fd5b5061031d6109233660046132b5565b612098565b600061093382612113565b92915050565b60606000805461094890613605565b80601f016020809104026020016040519081016040528092919081815260200182805461097490613605565b80156109c15780601f10610996576101008083540402835291602001916109c1565b820191906000526020600020905b8154815290600101906020018083116109a457829003601f168201915b5050505050905090565b7f27a0624e64a794e52337524177801654db9a21fcd4c18d902036cf6ff01b01596109f68133612138565b50600d805460ff19169055565b6000818152600260205260408120546001600160a01b0316610a815760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610aa882611463565b9050806001600160a01b0316836001600160a01b03161415610b165760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610a78565b336001600160a01b0382161480610b325750610b3281336108a6565b610ba45760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610a78565b610bae838361219c565b505050565b7f0ed873f8f88e98a22713f460360c003876e6ccc2d975a1273a13ab57840b3ead610bde8133612138565b50601155565b610bee338261220a565b610c0a5760405162461bcd60e51b8152600401610a78906134ea565b610bae838383612301565b6000828152600a6020526040902060010154610c318133612138565b610bae83836124ac565b6000610c468361157c565b8210610ca85760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610a78565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6001600160a01b0381163314610d415760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a78565b610d4b8282612532565b5050565b610bae83838360405180602001604052806000815250611cc0565b7f9aa164dc2052fa9a9eebee383f6617f557e14a8d068430567e50f1ac8348fdaa610d958133612138565b600f54808510610e065760405162461bcd60e51b815260206004820152603660248201527f73657453616c6553746167653a2073616c6553746167652077697468207468696044820152751cc81a5b99195e08191bd95cc81b9bdd08195e1a5cdd60521b6064820152608401610a78565b60008311610e695760405162461bcd60e51b815260206004820152602a60248201527f73657453616c6553746167653a20776569506572546f6b656e206d757374206260448201526965206e6f6e2d7a65726f60b01b6064820152608401610a78565b6000610e7486611088565b50509050808511610eed5760405162461bcd60e51b815260206004820152603f60248201527f73657453616c6553746167653a206e657720656e64546f6b656e73206d75737460448201527f206265206d6f7265207468616e20696e2070726576696f7573207374616765006064820152608401610a78565b81610ef9876001612599565b1015610f8a576000610f0f610554886001612599565b50915050808611610f885760405162461bcd60e51b815260206004820152603b60248201527f73657453616c6553746167653a206e657720656e64546f6b656e73206d75737460448201527f206265206c657373207468616e20696e206e65787420737461676500000000006064820152608401610a78565b505b604051806040016040528086815260200185815250600f8781548110610fc057634e487b7160e01b600052603260045260246000fd5b60009182526020918290208351600290920201908155910151600190910155505050505050565b6000610ff260085490565b82106110555760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610a78565b6008828154811061107657634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b600080600080600f80549050116110e15760405162461bcd60e51b815260206004820152601760248201527f67657453616c6553746167653a206e6f207374616765730000000000000000006044820152606401610a78565b83611144576000600f858154811061110957634e487b7160e01b600052603260045260246000fd5b600091825260208083206040805180820190915260029093020180548084526001909101549290910182905291955090935091506112009050565b6000600f6111538660016125a5565b8154811061117157634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016040518060400160405290816000820154815260200160018201548152505090506000600f86815481106111c357634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080518082019091526002909202018054808352600190910154919092018190529251955093509091506112009050565b9193909250565b604080518082019091526000815260606020820152600e546112625760405162461bcd60e51b815260206004820152601460248201527367657442617463683a206e6f206261746368657360601b6044820152606401610a78565b600e8054611272906001906135ab565b8154811061129057634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016000015482106113215760405162461bcd60e51b815260206004820152604260248201527f67657442617463683a20746f6b656e4964206d757374206265206c657373207460448201527f68656e206c61737420746f6b656e20696420696e206261746368657320617272606482015261617960f01b608482015260a401610a78565b60005b600e5481101561145d57600e818154811061134f57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016000015483111561136d5761144b565b600e818154811061138e57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201604051806040016040529081600082015481526020016001820180546113c190613605565b80601f01602080910402602001604051908101604052809291908181526020018280546113ed90613605565b801561143a5780601f1061140f5761010080835404028352916020019161143a565b820191906000526020600020905b81548152906001019060200180831161141d57829003601f168201915b505050505081525050915050919050565b806114558161363a565b915050611324565b50919050565b6000818152600260205260408120546001600160a01b0316806109335760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610a78565b6000818152600b602052604090208054606091906114f790613605565b80601f016020809104026020016040519081016040528092919081815260200182805461152390613605565b80156115705780601f1061154557610100808354040283529160200191611570565b820191906000526020600020905b81548152906001019060200180831161155357829003601f168201915b50505050509050919050565b60006001600160a01b0382166115e75760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610a78565b506001600160a01b031660009081526003602052604090205490565b7f9aa164dc2052fa9a9eebee383f6617f557e14a8d068430567e50f1ac8348fdaa61162e8133612138565b600082116116915760405162461bcd60e51b815260206004820152602a60248201527f61646453616c6553746167653a20776569506572546f6b656e206d757374206260448201526965206e6f6e2d7a65726f60b01b6064820152608401610a78565b600f548061170b57600084116117065760405162461bcd60e51b815260206004820152603460248201527f61646453616c6553746167653a20666972737420737461676520656e64546f6b604482015273656e73206d757374206265206e6f6e2d7a65726f60601b6064820152608401610a78565b611796565b600061171b6105548360016125a5565b509150508085116117945760405162461bcd60e51b815260206004820152603a60248201527f61646453616c6553746167653a206e657720656e64546f6b656e73206d75737460448201527f206265206d6f7265207468616e2063757272656e74206c6173740000000000006064820152608401610a78565b505b50506040805180820190915282815260208101918252600f805460018101825560009190915290517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80260029092029182015590517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80390910155601055565b7f28eb28c26cbbd48a6bfad016505ccf4a189452995f59d16217af8920961ed25c61183f8133612138565b600e54836118a25760405162461bcd60e51b815260206004820152602a60248201527f61646442617463683a20626174636820656e64546f6b656e73206d757374206260448201526965206e6f6e2d7a65726f60b01b6064820152608401610a78565b801561196757600e6118b56001836135ab565b815481106118d357634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016000015484116119675760405162461bcd60e51b815260206004820152604560248201527f61646442617463683a206261746368456e644964206d7573742062652067726560448201527f61746572207468616e2074686520656e644964206f6620746865206c617374206064820152640c4c2e8c6d60db1b608482015260a401610a78565b604080518082019091528481526020808201858152600e8054600181018255600091909152835160029091027fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd81019182559151805191936119ee937fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fe0192910190612f7d565b50505050505050565b6000918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60606001805461094890613605565b6001600160a01b038216331415611a8a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610a78565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600f5460009081611b0660085490565b90506000849050600080611b2d604051806040016040528060008152602001600081525090565b60005b86811015611c3657600f8181548110611b5957634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016040518060400160405290816000820154815260200160018201548152505091508160000151861115611b9957611c24565b8151611ba590876125a5565b92508415611c1f5782851115611bf557611bd6611bcf8360200151856125b190919063ffffffff16565b8590612599565b9350611be285846125a5565b9450611bee8684612599565b9550611c24565b611c0f611bcf8360200151876125b190919063ffffffff16565b600095509350611bee8686612599565b611c36565b80611c2e8161363a565b915050611b30565b5091979650505050505050565b7fde99de62ff13877bfb32892f85138aa338f091ce421c1d80a3ed7cbd389e8090611c6e8133612138565b6000838152600c6020526040908190208390555183907fbc118caef5b83a02ad5f988c3550437e355b0c3e999d65e0652177448b97c88690611cb39085815260200190565b60405180910390a2505050565b611cca338361220a565b611ce65760405162461bcd60e51b8152600401610a78906134ea565b611cf2848484846125bd565b50505050565b7f27a0624e64a794e52337524177801654db9a21fcd4c18d902036cf6ff01b0159611d238133612138565b50600d805460ff19166001179055565b60606000611d4083611207565b6020015190506000815111611d645760405180602001604052806000815250611d8f565b80611d6e846125f0565b604051602001611d7f929190613385565b6040516020818303038152906040525b9392505050565b7f28eb28c26cbbd48a6bfad016505ccf4a189452995f59d16217af8920961ed25c611dc18133612138565b600e548210611e235760405162461bcd60e51b815260206004820152602860248201527f64656c65746542617463683a20696e646578206f7574206f66206261746368656044820152670e640d8cadccee8d60c31b6064820152608401610a78565b600e8281548110611e4457634e487b7160e01b600052603260045260246000fd5b60009182526020822060029091020181815590611cf26001830182613001565b6000828152600a6020526040902060010154611e808133612138565b610bae8383612532565b60105460085410611edd5760405162461bcd60e51b815260206004820152601b60248201527f6275793a2053616c652068617320616c726561647920656e64656400000000006044820152606401610a78565b60008111611f255760405162461bcd60e51b815260206004820152601560248201527406275793a206e6674732063616e6e6f74206265203605c1b6044820152606401610a78565b601154811115611f9d5760405162461bcd60e51b815260206004820152603b60248201527f6275793a20596f752063616e206e6f7420627579206d6f7265207468616e206d60448201527f6178507572636861736553697a65204e465473206174206f6e636500000000006064820152608401610a78565b601054611fb382611fad60085490565b90612599565b11156120015760405162461bcd60e51b815260206004820152601c60248201527f6275793a2045786365656473205f6d6178546f74616c537570706c79000000006044820152606401610a78565b3461200b82611af6565b146120645760405162461bcd60e51b8152602060048201526024808201527f6275793a2045746865722076616c75652073656e74206973206e6f7420636f726044820152631c9958dd60e21b6064820152608401610a78565b60005b81811015610d4b57600061207961270a565b9050612085338261279f565b50806120908161363a565b915050612067565b7fadb1f90fb043c84ed13cea91e76d7bc7af0bfa59ad8c7e6c623c30a52b8f20a66120c38133612138565b6000838152600b6020908152604090912083516120e292850190612f7d565b50827f7e632a301794d8d4a81ea7e20f37d1947158d36e66403af04ba85dd194b66f1b83604051611cb39190613485565b60006001600160e01b03198216637965db0b60e01b14806109335750610933826127b9565b61214282826119f7565b610d4b5761215a816001600160a01b031660146127de565b6121658360206127de565b6040516020016121769291906133d3565b60408051601f198184030181529082905262461bcd60e51b8252610a7891600401613485565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906121d182611463565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166122835760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610a78565b600061228e83611463565b9050806001600160a01b0316846001600160a01b031614806122c95750836001600160a01b03166122be84610a03565b6001600160a01b0316145b806122f957506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661231482611463565b6001600160a01b03161461237c5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610a78565b6001600160a01b0382166123de5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610a78565b6123e98383836129c0565b6123f460008261219c565b6001600160a01b038316600090815260036020526040812080546001929061241d9084906135ab565b90915550506001600160a01b038216600090815260036020526040812080546001929061244b908490613560565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6124b682826119f7565b610d4b576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff191660011790556124ee3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61253c82826119f7565b15610d4b576000828152600a602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000611d8f8284613560565b6000611d8f82846135ab565b6000611d8f828461358c565b6125c8848484612301565b6125d484848484612a2d565b611cf25760405162461bcd60e51b8152600401610a7890613498565b6060816126145750506040805180820190915260018152600360fc1b602082015290565b8160005b811561263e57806126288161363a565b91506126379050600a83613578565b9150612618565b60008167ffffffffffffffff81111561266757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612691576020820181803683370190505b5090505b84156122f9576126a66001836135ab565b91506126b3600a86613655565b6126be906030613560565b60f81b8183815181106126e157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350612703600a86613578565b9450612695565b600080601054425a61271d6001436135ab565b6040805160208101949094528301919091524060608201526080016040516020818303038152906040528051906020012060001c61275b9190613655565b90505b6000818152600260205260409020546001600160a01b03161561279a57612786600182613560565b90506010548110612795575060005b61275e565b919050565b610d4b828260405180602001604052806000815250612b3a565b60006001600160e01b0319821663780e9d6360e01b1480610933575061093382612b6d565b606060006127ed83600261358c565b6127f8906002613560565b67ffffffffffffffff81111561281e57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612848576020820181803683370190505b509050600360fc1b8160008151811061287157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106128ae57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006128d284600261358c565b6128dd906001613560565b90505b6001811115612971576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061291f57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061294357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361296a816135ee565b90506128e0565b508315611d8f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a78565b6129cb838383612bbd565b6001600160a01b038316610bae576010546008541115610bae5760405162461bcd60e51b815260206004820152601e60248201527f436f6c6c656374696f6e3a206d6178537570706c7920616368696576656400006044820152606401610a78565b60006001600160a01b0384163b15612b2f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612a71903390899088908890600401613448565b602060405180830381600087803b158015612a8b57600080fd5b505af1925050508015612abb575060408051601f3d908101601f19168201909252612ab891810190613299565b60015b612b15573d808015612ae9576040519150601f19603f3d011682016040523d82523d6000602084013e612aee565b606091505b508051612b0d5760405162461bcd60e51b8152600401610a7890613498565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506122f9565b506001949350505050565b612b448383612c75565b612b516000848484612a2d565b610bae5760405162461bcd60e51b8152600401610a7890613498565b60006001600160e01b031982166380ac58cd60e01b1480612b9e57506001600160e01b03198216635b5e139f60e01b145b8061093357506301ffc9a760e01b6001600160e01b0319831614610933565b6001600160a01b038316612c1857612c1381600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612c3b565b816001600160a01b0316836001600160a01b031614612c3b57612c3b8382612dc3565b6001600160a01b038216612c5257610bae81612e60565b826001600160a01b0316826001600160a01b031614610bae57610bae8282612f39565b6001600160a01b038216612ccb5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610a78565b6000818152600260205260409020546001600160a01b031615612d305760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610a78565b612d3c600083836129c0565b6001600160a01b0382166000908152600360205260408120805460019290612d65908490613560565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001612dd08461157c565b612dda91906135ab565b600083815260076020526040902054909150808214612e2d576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090612e72906001906135ab565b60008381526009602052604081205460088054939450909284908110612ea857634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060088381548110612ed757634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612f1d57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000612f448361157c565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054612f8990613605565b90600052602060002090601f016020900481019282612fab5760008555612ff1565b82601f10612fc457805160ff1916838001178555612ff1565b82800160010185558215612ff1579182015b82811115612ff1578251825591602001919060010190612fd6565b50612ffd92915061303e565b5090565b50805461300d90613605565b6000825580601f1061301d575050565b601f01602090049060005260206000209081019061303b919061303e565b50565b5b80821115612ffd576000815560010161303f565b600067ffffffffffffffff8084111561306e5761306e613695565b604051601f8501601f19908116603f0116810190828211818310171561309657613096613695565b816040528093508581528686860111156130af57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b038116811461279a57600080fd5b6000602082840312156130f1578081fd5b611d8f826130c9565b6000806040838503121561310c578081fd5b613115836130c9565b9150613123602084016130c9565b90509250929050565b600080600060608486031215613140578081fd5b613149846130c9565b9250613157602085016130c9565b9150604084013590509250925092565b6000806000806080858703121561317c578081fd5b613185856130c9565b9350613193602086016130c9565b925060408501359150606085013567ffffffffffffffff8111156131b5578182fd5b8501601f810187136131c5578182fd5b6131d487823560208401613053565b91505092959194509250565b600080604083850312156131f2578182fd5b6131fb836130c9565b91506020830135801515811461320f578182fd5b809150509250929050565b6000806040838503121561322c578182fd5b613235836130c9565b946020939093013593505050565b600060208284031215613254578081fd5b5035919050565b6000806040838503121561326d578182fd5b82359150613123602084016130c9565b60006020828403121561328e578081fd5b8135611d8f816136ab565b6000602082840312156132aa578081fd5b8151611d8f816136ab565b600080604083850312156132c7578182fd5b82359150602083013567ffffffffffffffff8111156132e4578182fd5b8301601f810185136132f4578182fd5b61330385823560208401613053565b9150509250929050565b6000806040838503121561331f578182fd5b50508035926020909101359150565b600080600060608486031215613342578081fd5b505081359360208301359350604090920135919050565b600081518084526133718160208601602086016135c2565b601f01601f19169290920160200192915050565b600083516133978184602088016135c2565b602f60f81b90830190815283516133b58160018401602088016135c2565b64173539b7b760d91b60019290910191820152600601949350505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161340b8160178501602088016135c2565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161343c8160288401602088016135c2565b01602801949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061347b90830184613359565b9695505050505050565b602081526000611d8f6020830184613359565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020815281516020820152600060208301516040808401526122f96060840182613359565b6000821982111561357357613573613669565b500190565b6000826135875761358761367f565b500490565b60008160001904831182151516156135a6576135a6613669565b500290565b6000828210156135bd576135bd613669565b500390565b60005b838110156135dd5781810151838201526020016135c5565b83811115611cf25750506000910152565b6000816135fd576135fd613669565b506000190190565b600181811c9082168061361957607f821691505b6020821081141561145d57634e487b7160e01b600052602260045260246000fd5b600060001982141561364e5761364e613669565b5060010190565b6000826136645761366461367f565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461303b57600080fdfea26469706673582212202ef604f8f9af573c88531f1f99e6a0e58ba0717ed206c37d54f7202345c94f5764736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getName(uint256)": {
        "details": "Returns name of the NFT at index"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getSkill(uint256)": {
        "details": "Returns skill of the NFT at index"
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setMaxPurchaseSize(uint256)": {
        "details": "Change max purchase size."
      },
      "setName(uint256,string)": {
        "details": "Change token name"
      },
      "setSkill(uint256,uint256)": {
        "details": "Change token skill"
      },
      "start()": {
        "details": "Starts sale"
      },
      "stop()": {
        "details": "Stops sale"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addBatch(uint256,string)": {
        "notice": "Add tokens batch to batches array"
      },
      "addSaleStage(uint256,uint256)": {
        "notice": "Adds new sale stage with given params at the end of `saleStages array`."
      },
      "buy(uint256)": {
        "notice": "Method to purchase and get random available NFTs."
      },
      "deleteBatch(uint256)": {
        "notice": "Removes batch at the given index"
      },
      "getBatch(uint256)": {
        "notice": "Return token batch URI"
      },
      "getSaleStage(uint256)": {
        "notice": "Returns info about sale stage with given index."
      },
      "getTotalPriceFor(uint256)": {
        "notice": "Returns summary price for given number of tokens."
      },
      "maxTotalSupply()": {
        "notice": "Returns current `_maxTotalSupply` value."
      },
      "saleStagesLength()": {
        "notice": "Returns current `_saleStages` array length."
      },
      "setSaleStage(uint256,uint256,uint256)": {
        "notice": "Rewrites sale stage properties with given index."
      },
      "tokenURI(uint256)": {
        "notice": "Return tokenURI"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 393,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 395,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 399,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 403,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 407,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 413,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1334,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1338,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1341,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1345,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_roles",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)"
      },
      {
        "astId": 2611,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_tokenName",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2615,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_tokenSkill",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2618,
        "contract": "contracts/Collection.sol:Collection",
        "label": "saleActive",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 2638,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_batches",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_struct(Batch)2634_storage)dyn_storage"
      },
      {
        "astId": 2642,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_saleStages",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_struct(SaleStage)2629_storage)dyn_storage"
      },
      {
        "astId": 2645,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_maxTotalSupply",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2648,
        "contract": "contracts/Collection.sol:Collection",
        "label": "maxPurchaseSize",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Batch)2634_storage)dyn_storage": {
        "base": "t_struct(Batch)2634_storage",
        "encoding": "dynamic_array",
        "label": "struct Collection.Batch[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(SaleStage)2629_storage)dyn_storage": {
        "base": "t_struct(SaleStage)2629_storage",
        "encoding": "dynamic_array",
        "label": "struct Collection.SaleStage[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)57_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Batch)2634_storage": {
        "encoding": "inplace",
        "label": "struct Collection.Batch",
        "members": [
          {
            "astId": 2631,
            "contract": "contracts/Collection.sol:Collection",
            "label": "endId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2633,
            "contract": "contracts/Collection.sol:Collection",
            "label": "baseURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)57_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 54,
            "contract": "contracts/Collection.sol:Collection",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 56,
            "contract": "contracts/Collection.sol:Collection",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SaleStage)2629_storage": {
        "encoding": "inplace",
        "label": "struct Collection.SaleStage",
        "members": [
          {
            "astId": 2626,
            "contract": "contracts/Collection.sol:Collection",
            "label": "endTokens",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2628,
            "contract": "contracts/Collection.sol:Collection",
            "label": "weiPerToken",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}