{
  "address": "0x881DF125197b3DE62287FcCe6aBfEaF7e0816cAf",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nfts",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "referral",
          "type": "address"
        }
      ],
      "name": "Buy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDna",
          "type": "uint256"
        }
      ],
      "name": "DnaChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newName",
          "type": "string"
        }
      ],
      "name": "NameChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSkill",
          "type": "uint256"
        }
      ],
      "name": "SkillChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DNA_SETTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME_SETTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SKILL_SETTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "rarity",
          "type": "uint256"
        }
      ],
      "name": "addBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startTokensBought",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTokensBought",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weiPerToken",
          "type": "uint256"
        }
      ],
      "name": "addSaleStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "batchesLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nfts",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchIndex",
          "type": "uint256"
        }
      ],
      "name": "deleteBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleStageIndex",
          "type": "uint256"
        }
      ],
      "name": "deleteSaleStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchIndex",
          "type": "uint256"
        }
      ],
      "name": "getBatch",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startBatchTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endBatchTokenId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "rarity",
              "type": "uint256"
            }
          ],
          "internalType": "struct Collection.Batch",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getBatchByToken",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startBatchTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endBatchTokenId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "rarity",
              "type": "uint256"
            }
          ],
          "internalType": "struct Collection.Batch",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBatches",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startBatchTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endBatchTokenId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "rarity",
              "type": "uint256"
            }
          ],
          "internalType": "struct Collection.Batch[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getDna",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRarity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleStageIndex",
          "type": "uint256"
        }
      ],
      "name": "getSaleStage",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTokensBought",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTokensBought",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weiPerToken",
              "type": "uint256"
            }
          ],
          "internalType": "struct Collection.SaleStage",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSaleStages",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTokensBought",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTokensBought",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weiPerToken",
              "type": "uint256"
            }
          ],
          "internalType": "struct Collection.SaleStage[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getSkill",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "name": "getTotalPriceFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPurchaseSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mintIndex",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nfts",
          "type": "uint256"
        }
      ],
      "name": "mintMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleStagesLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "batchStartId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "batchEndId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "rarity",
          "type": "uint256"
        }
      ],
      "name": "setBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "setDefaultName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rarity",
          "type": "uint256"
        }
      ],
      "name": "setDefaultRarity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "skill",
          "type": "uint256"
        }
      ],
      "name": "setDefaultSkill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setDefaultUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newDna",
          "type": "uint256"
        }
      ],
      "name": "setDna",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPurchaseSize",
          "type": "uint256"
        }
      ],
      "name": "setMaxPurchaseSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newName",
          "type": "string"
        }
      ],
      "name": "setName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleStageId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTokensBought",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTokensBought",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weiPerToken",
          "type": "uint256"
        }
      ],
      "name": "setSaleStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newSkill",
          "type": "uint256"
        }
      ],
      "name": "setSkill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newVault",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "start",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x549b2f261f4444d5aa85b3e70eb157bd21bb2e1c09156cc61870d9d3ef958d9c",
  "receipt": {
    "to": null,
    "from": "0xe56969C6AEe17AC04a4dFE991Be4A3AFb44256B6",
    "contractAddress": "0x881DF125197b3DE62287FcCe6aBfEaF7e0816cAf",
    "transactionIndex": 180,
    "gasUsed": "4430844",
    "logsBloom": "0x
    "blockHash": "0x6fdf283400b8d7327e8a9bb005614a96ca845141057c948ded84045f18ac3a39",
    "transactionHash": "0x549b2f261f4444d5aa85b3e70eb157bd21bb2e1c09156cc61870d9d3ef958d9c",
    "logs": [],
    "blockNumber": 13067660,
    "cumulativeGasUsed": "12134282",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8ca3b690752e12963bb85f37854d9aa6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nfts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDna\",\"type\":\"uint256\"}],\"name\":\"DnaChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"NameChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSkill\",\"type\":\"uint256\"}],\"name\":\"SkillChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DNA_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SKILL_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rarity\",\"type\":\"uint256\"}],\"name\":\"addBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTokensBought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTokensBought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weiPerToken\",\"type\":\"uint256\"}],\"name\":\"addSaleStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nfts\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchIndex\",\"type\":\"uint256\"}],\"name\":\"deleteBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleStageIndex\",\"type\":\"uint256\"}],\"name\":\"deleteSaleStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchIndex\",\"type\":\"uint256\"}],\"name\":\"getBatch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startBatchTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBatchTokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rarity\",\"type\":\"uint256\"}],\"internalType\":\"struct Collection.Batch\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getBatchByToken\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startBatchTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBatchTokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rarity\",\"type\":\"uint256\"}],\"internalType\":\"struct Collection.Batch\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBatches\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startBatchTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBatchTokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rarity\",\"type\":\"uint256\"}],\"internalType\":\"struct Collection.Batch[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDna\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRarity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleStageIndex\",\"type\":\"uint256\"}],\"name\":\"getSaleStage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTokensBought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTokensBought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weiPerToken\",\"type\":\"uint256\"}],\"internalType\":\"struct Collection.SaleStage\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSaleStages\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTokensBought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTokensBought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weiPerToken\",\"type\":\"uint256\"}],\"internalType\":\"struct Collection.SaleStage[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSkill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"getTotalPriceFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPurchaseSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintIndex\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nfts\",\"type\":\"uint256\"}],\"name\":\"mintMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleStagesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchStartId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchEndId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rarity\",\"type\":\"uint256\"}],\"name\":\"setBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setDefaultName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rarity\",\"type\":\"uint256\"}],\"name\":\"setDefaultRarity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"skill\",\"type\":\"uint256\"}],\"name\":\"setDefaultSkill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setDefaultUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDna\",\"type\":\"uint256\"}],\"name\":\"setDna\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPurchaseSize\",\"type\":\"uint256\"}],\"name\":\"setMaxPurchaseSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleStageId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTokensBought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTokensBought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weiPerToken\",\"type\":\"uint256\"}],\"name\":\"setSaleStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSkill\",\"type\":\"uint256\"}],\"name\":\"setSkill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"NFT Legends team*\",\"kind\":\"dev\",\"methods\":{\"addBatch(uint256,uint256,string,uint256)\":{\"params\":{\"baseURI\":\"ipfs batch URI\",\"endTokenId\":\"index of the last batch token\",\"rarity\":\"batch rarity Note: batch ids can change over time and reorder as the result of batch removal\",\"startTokenId\":\"index of the first batch token\"}},\"addSaleStage(uint256,uint256,uint256)\":{\"params\":{\"endTokensBought\":\"index of the last batch token\",\"startTokensBought\":\"index of the first batch token\",\"weiPerToken\":\"price for token\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"batchesLength()\":{\"details\":\"Returns the length of configured batches\",\"returns\":{\"_0\":\"current `_batches` array length.\"}},\"buy(uint256,address)\":{\"details\":\"Method to purchase and random available NFTs.\",\"params\":{\"nfts\":\"the number of tokens to buy\",\"referral\":\"the address of referral who invited the user to the platform\"}},\"deleteBatch(uint256)\":{\"params\":{\"batchIndex\":\"the index of the batch to be deteted\"}},\"deleteSaleStage(uint256)\":{\"details\":\"Delete sale stage by the given given index\",\"params\":{\"saleStageIndex\":\"index of the batch to be deleted\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getBatch(uint256)\":{\"details\":\"Returns the batch by its index in the array\",\"params\":{\"batchIndex\":\"batch index\"},\"returns\":{\"_0\":\"Batch info Note: batch ids can change over time and reorder as the result of batch removal\"}},\"getBatchByToken(uint256)\":{\"details\":\"Return batch by given tokenId\",\"params\":{\"tokenId\":\"token id\"},\"returns\":{\"_0\":\"batch structure\"}},\"getBatches()\":{\"details\":\"Returns all the batches\",\"returns\":{\"_0\":\"`_batches`.\"}},\"getDna(uint256)\":{\"details\":\"Returns individual DNA of the NFT at index\",\"params\":{\"index\":\"token id\"},\"returns\":{\"_0\":\"NFT DNA\"}},\"getName(uint256)\":{\"details\":\"Returns name of the NFT at index\",\"params\":{\"index\":\"token id\"},\"returns\":{\"_0\":\"NFT name\"}},\"getRarity(uint256)\":{\"details\":\"Returns rarity of the NFT by token Id\",\"params\":{\"tokenId\":\"id of the token\"},\"returns\":{\"_0\":\"rarity\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getSaleStage(uint256)\":{\"details\":\"Returns the saleStage by its index\",\"params\":{\"saleStageIndex\":\"salestage index in the array\"},\"returns\":{\"_0\":\"info about sale stage\"}},\"getSaleStages()\":{\"details\":\"Returns all sale stages\",\"returns\":{\"_0\":\"`_saleStages`.\"}},\"getSkill(uint256)\":{\"details\":\"Returns skill of the NFT at index\",\"params\":{\"index\":\"token id\"},\"returns\":{\"_0\":\"NFT skill\"}},\"getTotalPriceFor(uint256)\":{\"details\":\"Calculates the total price for the given number of tokens\",\"params\":{\"tokens\":\"number of tokens to be purchased\"},\"returns\":{\"_0\":\"summary price\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"maxTotalSupply()\":{\"details\":\"Returns current `_maxTotalSupply` value.\"},\"mint(address,uint256)\":{\"details\":\"Mints a specific token (with known id) to the given address\",\"params\":{\"mintIndex\":\"the tokenId to mint\",\"to\":\"the receiver\"}},\"mintMultiple(address,uint256)\":{\"details\":\"Public method to randomly mint desired number of NFTs\",\"params\":{\"nfts\":\"the number of tokens to be minted\",\"to\":\"the receiver\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"saleStagesLength()\":{\"details\":\"Returns the number of configured saleStages (tokensale schedule)\",\"returns\":{\"_0\":\"current `_saleStages` array length\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBatch(uint256,uint256,uint256,string,uint256)\":{\"params\":{\"baseURI\":\"ipfs batch URI\",\"batchEndId\":\"index of the last batch token\",\"batchIndex\":\"the index of the batch to be changed\",\"batchStartId\":\"index of the first batch token\",\"rarity\":\"batch rarity Note: batch ids can change over time and reorder as the result of batch removal\"}},\"setDefaultName(string)\":{\"details\":\"Set default name.\",\"params\":{\"name\":\"new default name\"}},\"setDefaultRarity(uint256)\":{\"details\":\"Set defaultRarity\",\"params\":{\"rarity\":\"new default rarity\"}},\"setDefaultSkill(uint256)\":{\"details\":\"Set default skill.\",\"params\":{\"skill\":\"new default name\"}},\"setDefaultUri(string)\":{\"details\":\"Set defaultUri\"},\"setDna(uint256,uint256)\":{\"details\":\"Set or change individual token DNA\"},\"setMaxPurchaseSize(uint256)\":{\"details\":\"Set max purchase size (to avoid gas overspending)\"},\"setName(uint256,string)\":{\"details\":\"Set or change individual token name\"},\"setSaleStage(uint256,uint256,uint256,uint256)\":{\"params\":{\"endTokensBought\":\"index of the last batch token\",\"saleStageId\":\"index of the first sale stage token\",\"startTokensBought\":\"index of the first batch token\",\"weiPerToken\":\"price for token\"}},\"setSkill(uint256,uint256)\":{\"details\":\"Set or change individual token skill\"},\"setVault(address)\":{\"details\":\"Set vault\",\"params\":{\"newVault\":\"address to receive ethers\"}},\"start()\":{\"details\":\"Start tokensale process\"},\"stop()\":{\"details\":\"Stop tokensale\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"IPFS address that stores JSON with token attributes Tries to find it by batch first. If token has no batch, returns defaultUri.\",\"params\":{\"tokenId\":\"id of the token\"},\"returns\":{\"_0\":\"string with ipfs address to json with token attribute or URI for default token if token doesn`t exist\"}},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"title\":\"Digital art collectible metaverse\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addBatch(uint256,uint256,string,uint256)\":{\"notice\":\"Creates the new batch for given token range\"},\"addSaleStage(uint256,uint256,uint256)\":{\"notice\":\"Add sale stage (i.e. tokensale schedule) It takes place at the end of `saleStages array`\"},\"deleteBatch(uint256)\":{\"notice\":\"Deletes batch by its id. This reorders the index of the token that was last.\"},\"setBatch(uint256,uint256,uint256,string,uint256)\":{\"notice\":\"Update existing batch by its index\"},\"setSaleStage(uint256,uint256,uint256,uint256)\":{\"notice\":\"Update (rewrite) saleStage properties by index\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Collection.sol\":\"Collection\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x56f89378fca44345fe8de632c70311052c39d64a7a710513316676d343380e68\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x3d03f5cb8b9f17b75c3b6eb4921b1fe7b87ed77cf0c8638496eee5183a5101e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfbb3ca7272af58dc245a20e91a1f68481ee04706fa3fe46d184000efc21f4bad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721Enumerable_init_unchained();\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal initializer {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x3b68fc053bbad44644adcdddff840106591364bbc0879aac5505756b67fab974\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x54b0a0b80c447749f769f37fec206cdee23e7466511802191248e95c8250ff9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6dd43e44dbaad99d1863be7f2837085f361efdcb1fde5a9bf84c4efa07f89ed3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/Collection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title Digital art collectible metaverse\\n * @author NFT Legends team\\n **/\\ncontract Collection is ERC721Upgradeable, ERC721EnumerableUpgradeable, AccessControlUpgradeable {\\n    event NameChange(uint256 indexed index, string newName);\\n    event SkillChange(uint256 indexed index, uint256 newSkill);\\n    event DnaChange(uint256 indexed index, uint256 newDna);\\n    event Buy(address indexed _from, uint256 nfts, address referral);\\n\\n    // each token has its own attributes: Name, Skill and DNA\\n    // Name is the symbolic string, that can be changed over time\\n    mapping(uint256 => string) private _tokenName;\\n    // Skill is a numeric value that represents character's experience\\n    mapping(uint256 => uint256) private _tokenSkill;\\n    // DNA is 256-bit map where unique token attributes encoded\\n    mapping(uint256 => uint256) private _tokenDna;\\n\\n    // when sale is active, anyone is able to buy the token\\n    bool public saleActive;\\n\\n    using SafeMath for uint256;\\n    using Strings for uint256;\\n\\n    // The token purchase price depends on how early you buy the character\\n    // (i.e. sequential number of the purchase)\\n    struct SaleStage {\\n        uint256 startTokensBought;\\n        uint256 endTokensBought;\\n        uint256 weiPerToken;\\n    }\\n\\n    // All the tokens are grouped in batches. Batch is basically IPFS folder (DAG)\\n    // that stores token descriptions and images. It tokenId falls into batch, the\\n    // tokenURI = batch.baseURI + \\\"/\\\" + tokenId.\\n    // All the batches have the same rarity parameter.\\n    struct Batch {\\n        uint256 startBatchTokenId;\\n        uint256 endBatchTokenId;\\n        string baseURI;\\n        uint256 rarity;\\n    }\\n\\n    // Arrays that store configured batches and saleStages\\n    Batch[] internal _batches;\\n    SaleStage[] internal _saleStages;\\n    // Maximum allowed tokenSupply boundary. Can be extended by adding new stages.\\n    uint256 internal _maxTotalSupply;\\n    // Max NFTs that can be bought at once. To avoid gas overspending.\\n    uint256 public maxPurchaseSize;\\n\\n    // If tokenId doesn't match any configured batch, defaultURI parameters are used.\\n    string internal _defaultUri;\\n    uint256 internal _defaultRarity;\\n    string internal _defaultName;\\n    uint256 internal _defaultSkill;\\n    // Roles that can modify individual characteristics\\n    bytes32 public constant NAME_SETTER_ROLE = keccak256(\\\"NAME_SETTER_ROLE\\\");\\n    bytes32 public constant SKILL_SETTER_ROLE = keccak256(\\\"SKILL_SETTER_ROLE\\\");\\n    bytes32 public constant DNA_SETTER_ROLE = keccak256(\\\"DNA_SETTER_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    // Received funds (native Ether or BNB) get transferred to Vault address\\n    address payable public vault;\\n\\n    function initialize() public initializer {\\n        __ERC721_init(\\\"CyberPunk\\\", \\\"A-12\\\");\\n        __ERC721Enumerable_init();\\n        __AccessControl_init();\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(NAME_SETTER_ROLE, _msgSender());\\n        _setupRole(SKILL_SETTER_ROLE, _msgSender());\\n        _setupRole(DNA_SETTER_ROLE, _msgSender());\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        maxPurchaseSize = 20;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721Upgradeable, ERC721EnumerableUpgradeable, AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns current `_maxTotalSupply` value.\\n     */\\n    function maxTotalSupply() public view virtual returns (uint256) {\\n        return _maxTotalSupply;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer incl. minting\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721Upgradeable, ERC721EnumerableUpgradeable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        // check maxTotalSupply is not exceeded on mint\\n        if (from == address(0)) {\\n            require(totalSupply() <= _maxTotalSupply, \\\"Collection: maxSupply achieved\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of configured saleStages (tokensale schedule)\\n     * @return current `_saleStages` array length\\n     */\\n    function saleStagesLength() public view returns (uint256) {\\n        return _saleStages.length;\\n    }\\n\\n    /**\\n     * @dev Returns the saleStage by its index\\n     * @param saleStageIndex salestage index in the array\\n     * @return info about sale stage\\n     */\\n    function getSaleStage(uint256 saleStageIndex) public view returns (SaleStage memory) {\\n        require(_saleStages.length > 0, \\\"getSaleStage: no stages\\\");\\n        require(saleStageIndex < _saleStages.length, \\\"Id must be < sale stages length\\\");\\n\\n        return _saleStages[saleStageIndex];\\n    }\\n\\n    /**\\n     * @dev Returns the length of configured batches\\n     * @return current `_batches` array length.\\n     */\\n    function batchesLength() public view returns (uint256) {\\n        return _batches.length;\\n    }\\n\\n    /**\\n     * @dev Returns all the batches\\n     * @return `_batches`.\\n     */\\n    function getBatches() public view returns (Batch[] memory) {\\n        return _batches;\\n    }\\n\\n    /**\\n     * @dev Returns all sale stages\\n     * @return `_saleStages`.\\n     */\\n    function getSaleStages() public view returns (SaleStage[] memory) {\\n        return _saleStages;\\n    }\\n\\n    /**\\n     * @dev Returns the batch by its index in the array\\n     * @param batchIndex batch index\\n     * @return Batch info\\n     * Note: batch ids can change over time and reorder as the result of batch removal\\n     */\\n    function getBatch(uint256 batchIndex) public view returns (Batch memory) {\\n        require(_batches.length > 0, \\\"getBatch: no batches\\\");\\n        require(batchIndex < _batches.length, \\\"Id must be < batch length\\\");\\n\\n        return _batches[batchIndex];\\n    }\\n\\n    /**\\n     * @dev Return batch by given tokenId\\n     * @param tokenId token id\\n     * @return batch structure\\n     */\\n    function getBatchByToken(uint256 tokenId) public view returns (Batch memory) {\\n        require(_batches.length > 0, \\\"getBatchByToken: no batches\\\");\\n\\n        for (uint256 i; i < _batches.length; i++) {\\n            if (tokenId > _batches[i].endBatchTokenId || tokenId < _batches[i].startBatchTokenId) {\\n                continue;\\n            } else {\\n                return _batches[i];\\n            }\\n        }\\n        revert(\\\"batch doesn't exist\\\");\\n    }\\n\\n    /**\\n     * @dev IPFS address that stores JSON with token attributes\\n     * Tries to find it by batch first. If token has no batch, returns defaultUri.\\n     * @param tokenId id of the token\\n     * @return string with ipfs address to json with token attribute\\n     * or URI for default token if token doesn`t exist\\n     */\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        require(_batches.length > 0, \\\"tokenURI: no batches\\\");\\n\\n        for (uint256 i; i < _batches.length; i++) {\\n            if (tokenId > _batches[i].endBatchTokenId || tokenId < _batches[i].startBatchTokenId) {\\n                continue;\\n            } else {\\n                return string(abi.encodePacked(_batches[i].baseURI, \\\"/\\\", tokenId.toString(), \\\".json\\\"));\\n            }\\n        }\\n        return _defaultUri;\\n    }\\n\\n    /**\\n     * @notice Creates the new batch for given token range\\n     * @param startTokenId index of the first batch token\\n     * @param endTokenId index of the last batch token\\n     * @param baseURI ipfs batch URI\\n     * @param rarity batch rarity\\n     * Note: batch ids can change over time and reorder as the result of batch removal\\n     */\\n    function addBatch(\\n        uint256 startTokenId,\\n        uint256 endTokenId,\\n        string memory baseURI,\\n        uint256 rarity\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        uint256 _batchesLength = _batches.length;\\n\\n        require(startTokenId <= endTokenId, \\\"startId must be <= than EndId\\\");\\n        if (_batchesLength > 0) {\\n            for (uint256 i; i < _batchesLength; i++) {\\n                // if both bounds are lower or higher than iter batch\\n                if (\\n                    (startTokenId < _batches[i].startBatchTokenId && endTokenId < _batches[i].startBatchTokenId) ||\\n                    (startTokenId > _batches[i].endBatchTokenId && endTokenId > _batches[i].endBatchTokenId)\\n                ) {\\n                    continue;\\n                } else {\\n                    revert(\\\"batches intersect\\\");\\n                }\\n            }\\n        }\\n\\n        _batches.push(Batch(startTokenId, endTokenId, baseURI, rarity));\\n    }\\n\\n    /**\\n     * @notice Update existing batch by its index\\n     * @param batchIndex the index of the batch to be changed\\n     * @param batchStartId index of the first batch token\\n     * @param batchEndId index of the last batch token\\n     * @param baseURI ipfs batch URI\\n     * @param rarity batch rarity\\n     * Note: batch ids can change over time and reorder as the result of batch removal\\n     */\\n    function setBatch(\\n        uint256 batchIndex,\\n        uint256 batchStartId,\\n        uint256 batchEndId,\\n        string memory baseURI,\\n        uint256 rarity\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        uint256 _batchesLength = _batches.length;\\n        require(_batchesLength > 0, \\\"setBatch: batches is empty\\\");\\n        require(batchStartId <= batchEndId, \\\"startId must be <= than EndId\\\");\\n\\n        for (uint256 i; i < _batchesLength; i++) {\\n            if (i == batchIndex) {\\n                continue;\\n            } else {\\n                // if both bounds are lower or higher than iter batch\\n                if (\\n                    (batchStartId < _batches[i].startBatchTokenId && batchEndId < _batches[i].startBatchTokenId) ||\\n                    (batchStartId > _batches[i].endBatchTokenId && batchEndId > _batches[i].endBatchTokenId)\\n                ) {\\n                    continue;\\n                } else {\\n                    revert(\\\"batches intersect\\\");\\n                }\\n            }\\n        }\\n\\n        _batches[batchIndex].startBatchTokenId = batchStartId;\\n        _batches[batchIndex].endBatchTokenId = batchEndId;\\n        _batches[batchIndex].baseURI = baseURI;\\n        _batches[batchIndex].rarity = rarity;\\n    }\\n\\n    /**\\n     * @notice Deletes batch by its id. This reorders the index of the token that was last.\\n     * @param batchIndex the index of the batch to be deteted\\n     */\\n    function deleteBatch(uint256 batchIndex) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_batches.length > batchIndex, \\\"index out of batches length\\\");\\n        _batches[batchIndex] = _batches[_batches.length - 1];\\n        _batches.pop();\\n    }\\n\\n    /**\\n     * @notice Add sale stage (i.e. tokensale schedule)\\n     * It takes place at the end of `saleStages array`\\n     * @param startTokensBought index of the first batch token\\n     * @param endTokensBought index of the last batch token\\n     * @param weiPerToken price for token\\n     */\\n    function addSaleStage(\\n        uint256 startTokensBought,\\n        uint256 endTokensBought,\\n        uint256 weiPerToken\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(startTokensBought <= endTokensBought, \\\"startTokensBought must be <= than endTokensBought\\\");\\n        require(weiPerToken > 0, \\\"weiPerToken must be non-zero\\\");\\n        uint256 _saleStagesLength = _saleStages.length;\\n\\n        if (_saleStagesLength > 0) {\\n            for (uint256 i; i < _saleStagesLength; i++) {\\n                // if both bounds are lower or higher than iter sale stage\\n                if (\\n                    (startTokensBought < _saleStages[i].startTokensBought &&\\n                        endTokensBought < _saleStages[i].startTokensBought) ||\\n                    (startTokensBought > _saleStages[i].endTokensBought &&\\n                        endTokensBought > _saleStages[i].endTokensBought)\\n                ) {\\n                    continue;\\n                } else {\\n                    revert(\\\"intersection _saleStages\\\");\\n                }\\n            }\\n        }\\n\\n        _saleStages.push(SaleStage(startTokensBought, endTokensBought, weiPerToken));\\n        _maxTotalSupply += endTokensBought - startTokensBought + 1;\\n    }\\n\\n    /**\\n     * @notice Update (rewrite) saleStage properties by index\\n     * @param saleStageId index of the first sale stage token\\n     * @param startTokensBought index of the first batch token\\n     * @param endTokensBought index of the last batch token\\n     * @param weiPerToken price for token\\n     */\\n    function setSaleStage(\\n        uint256 saleStageId,\\n        uint256 startTokensBought,\\n        uint256 endTokensBought,\\n        uint256 weiPerToken\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        uint256 _saleStagesLength = _saleStages.length;\\n        require(_saleStagesLength > 0, \\\"batches is empty\\\");\\n        require(startTokensBought <= endTokensBought, \\\"startId must be <= than EndId\\\");\\n        for (uint256 i; i < _saleStagesLength; i++) {\\n            if (i == saleStageId) {\\n                continue;\\n            } else {\\n                // if both bounds are lower or higher than iter sale stage\\n                if (\\n                    (startTokensBought < _saleStages[i].startTokensBought &&\\n                        endTokensBought < _saleStages[i].startTokensBought) ||\\n                    (startTokensBought > _saleStages[i].endTokensBought &&\\n                        endTokensBought > _saleStages[i].endTokensBought)\\n                ) {\\n                    continue;\\n                } else {\\n                    revert(\\\"intersection _saleStages\\\");\\n                }\\n            }\\n        }\\n        SaleStage memory _saleStage = _saleStages[saleStageId];\\n        _maxTotalSupply =\\n            _maxTotalSupply -\\n            (_saleStage.endTokensBought - _saleStage.startTokensBought + 1) +\\n            (endTokensBought - startTokensBought + 1);\\n\\n        _saleStages[saleStageId].startTokensBought = startTokensBought;\\n        _saleStages[saleStageId].endTokensBought = endTokensBought;\\n        _saleStages[saleStageId].weiPerToken = weiPerToken;\\n    }\\n\\n    /**\\n     * @dev Delete sale stage by the given given index\\n     * @param saleStageIndex index of the batch to be deleted\\n     */\\n    function deleteSaleStage(uint256 saleStageIndex) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_saleStages.length > saleStageIndex, \\\"index out of sale stage length\\\");\\n        SaleStage memory _saleStage = _saleStages[saleStageIndex];\\n        _maxTotalSupply -= _saleStage.endTokensBought - _saleStage.startTokensBought + 1;\\n\\n        _saleStages[saleStageIndex] = _saleStages[_saleStages.length - 1];\\n        _saleStages.pop();\\n    }\\n\\n    /**\\n     * @dev Calculates the total price for the given number of tokens\\n     * @param tokens number of tokens to be purchased\\n     * @return summary price\\n     */\\n    function getTotalPriceFor(uint256 tokens) public view returns (uint256) {\\n        require(tokens > 0, \\\"tokens must be more then 0\\\");\\n\\n        uint256 _saleStagesLength = _saleStages.length;\\n        uint256 totalSupply = totalSupply();\\n        uint256 iterPrice = 0;\\n        uint256 totalPrice = 0;\\n\\n        SaleStage memory saleStage;\\n        for (uint256 tokenIndex = 0; tokenIndex < tokens; tokenIndex++) {\\n            iterPrice = 0;\\n            for (uint256 i = 0; i < _saleStagesLength; i++) {\\n                saleStage = _saleStages[i];\\n                if (totalSupply > saleStage.endTokensBought || totalSupply < saleStage.startTokensBought) continue;\\n                iterPrice += saleStage.weiPerToken;\\n            }\\n            if (iterPrice == 0) {\\n                revert(\\\"saleStage doesn't exist\\\");\\n            }\\n            totalPrice += iterPrice;\\n            totalSupply += 1;\\n        }\\n        return totalPrice;\\n    }\\n\\n    /**\\n     * @dev Method to randomly mint desired number of NFTs\\n     * @param to the address where you want to transfer tokens\\n     * @param nfts the number of tokens to be minted\\n     */\\n    function _mintMultiple(address to, uint256 nfts) internal {\\n        require(totalSupply() < _maxTotalSupply, \\\"Sale has already ended\\\");\\n        require(nfts > 0, \\\"nfts cannot be 0\\\");\\n        require(totalSupply().add(nfts) <= _maxTotalSupply, \\\"Exceeds _maxTotalSupply\\\");\\n\\n        for (uint256 i = 0; i < nfts; i++) {\\n            uint256 mintIndex = _getRandomAvailableIndex();\\n            _safeMint(to, mintIndex);\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints a specific token (with known id) to the given address\\n     * @param to the receiver\\n     * @param mintIndex the tokenId to mint\\n     */\\n    function mint(address to, uint256 mintIndex) public onlyRole(MINTER_ROLE) {\\n        _safeMint(to, mintIndex);\\n    }\\n\\n    /**\\n     * @dev Public method to randomly mint desired number of NFTs\\n     * @param to the receiver\\n     * @param nfts the number of tokens to be minted\\n     */\\n    function mintMultiple(address to, uint256 nfts) public onlyRole(MINTER_ROLE) {\\n        _mintMultiple(to, nfts);\\n    }\\n\\n    /**\\n     * @dev Method to purchase and random available NFTs.\\n     * @param nfts the number of tokens to buy\\n     * @param referral the address of referral who invited the user to the platform\\n     */\\n    function buy(uint256 nfts, address referral) public payable {\\n        require(saleActive, \\\"Sale is not active\\\");\\n        require(nfts <= maxPurchaseSize, \\\"Can not buy > maxPurchaseSize\\\");\\n        require(getTotalPriceFor(nfts) == msg.value, \\\"Ether value sent is not correct\\\");\\n        emit Buy(msg.sender, nfts, referral);\\n        vault.transfer(msg.value);\\n        _mintMultiple(msg.sender, nfts);\\n    }\\n\\n    /**\\n     * @dev Returns the (pseudo-)random token index free of owner.\\n     * @return available token index\\n     */\\n    function _getRandomAvailableIndex() internal view returns (uint256) {\\n        uint256 index = (uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    block.timestamp, /* solhint-disable not-rely-on-time */\\n                    gasleft(),\\n                    blockhash(block.number - 1)\\n                )\\n            )\\n        ) % _maxTotalSupply);\\n        while (_exists(index)) {\\n            index += 1;\\n            if (index >= _maxTotalSupply) {\\n                index = 0;\\n            }\\n        }\\n        return index;\\n    }\\n\\n    /**\\n     * @dev Returns rarity of the NFT by token Id\\n     * @param tokenId id of the token\\n     * @return rarity\\n     */\\n    function getRarity(uint256 tokenId) public view returns (uint256) {\\n        require(_batches.length > 0, \\\"getBatchByToken: no batches\\\");\\n\\n        for (uint256 i; i < _batches.length; i++) {\\n            if (tokenId > _batches[i].endBatchTokenId || tokenId < _batches[i].startBatchTokenId) {\\n                continue;\\n            } else {\\n                return _batches[i].rarity;\\n            }\\n        }\\n        return _defaultRarity;\\n    }\\n\\n    /**\\n     * @dev Returns name of the NFT at index\\n     * @param index token id\\n     * @return NFT name\\n     */\\n    function getName(uint256 index) public view returns (string memory) {\\n        require(index < _maxTotalSupply, \\\"index < _maxTotalSupply\\\");\\n        bytes memory _tokenWeight = bytes(_tokenName[index]);\\n        if (_tokenWeight.length == 0) {\\n            return _defaultName;\\n        }\\n        return _tokenName[index];\\n    }\\n\\n    /**\\n     * @dev Returns skill of the NFT at index\\n     * @param index token id\\n     * @return NFT skill\\n     */\\n    function getSkill(uint256 index) public view returns (uint256) {\\n        require(index < _maxTotalSupply, \\\"index < _maxTotalSupply\\\");\\n        if (_tokenSkill[index] == 0) {\\n            return _defaultSkill;\\n        }\\n        return _tokenSkill[index];\\n    }\\n\\n    /**\\n     * @dev Returns individual DNA of the NFT at index\\n     * @param index token id\\n     * @return NFT DNA\\n     */\\n    function getDna(uint256 index) public view returns (uint256) {\\n        require(index < _maxTotalSupply, \\\"index < _maxTotalSupply\\\");\\n        return _tokenDna[index];\\n    }\\n\\n    /**\\n     * @dev Start tokensale process\\n     */\\n    function start() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(bytes(_defaultUri).length > 0, \\\"_defaultUri is undefined\\\");\\n        require(vault != address(0), \\\"Vault is undefined\\\");\\n        saleActive = true;\\n    }\\n\\n    /**\\n     * @dev Stop tokensale\\n     */\\n    function stop() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        saleActive = false;\\n    }\\n\\n    /**\\n     * @dev Set or change individual token name\\n     */\\n    function setName(uint256 index, string memory newName) public onlyRole(NAME_SETTER_ROLE) {\\n        require(index < _maxTotalSupply, \\\"index < _maxTotalSupply\\\");\\n        _tokenName[index] = newName;\\n        emit NameChange(index, newName);\\n    }\\n\\n    /**\\n     * @dev Set or change individual token skill\\n     */\\n    function setSkill(uint256 index, uint256 newSkill) public onlyRole(SKILL_SETTER_ROLE) {\\n        require(index < _maxTotalSupply, \\\"index < _maxTotalSupply\\\");\\n        _tokenSkill[index] = newSkill;\\n        emit SkillChange(index, newSkill);\\n    }\\n\\n    /**\\n     * @dev Set or change individual token DNA\\n     */\\n    function setDna(uint256 index, uint256 newDna) public onlyRole(DNA_SETTER_ROLE) {\\n        require(index < _maxTotalSupply, \\\"index < _maxTotalSupply\\\");\\n        _tokenDna[index] = newDna;\\n        emit DnaChange(index, newDna);\\n    }\\n\\n    /**\\n     * @dev Set max purchase size (to avoid gas overspending)\\n     */\\n    function setMaxPurchaseSize(uint256 newPurchaseSize) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        maxPurchaseSize = newPurchaseSize;\\n    }\\n\\n    /**\\n     * @dev Set defaultUri\\n     */\\n    function setDefaultUri(string memory uri) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _defaultUri = uri;\\n    }\\n\\n    /**\\n     * @dev Set vault\\n     * @param newVault address to receive ethers\\n     */\\n    function setVault(address payable newVault) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        vault = newVault;\\n    }\\n\\n    /**\\n     * @dev Set defaultRarity\\n     * @param rarity new default rarity\\n     */\\n    function setDefaultRarity(uint256 rarity) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _defaultRarity = rarity;\\n    }\\n\\n    /**\\n     * @dev Set default name.\\n     * @param name new default name\\n     */\\n    function setDefaultName(string memory name) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _defaultName = name;\\n    }\\n\\n    /**\\n     * @dev Set default skill.\\n     * @param skill new default name\\n     */\\n    function setDefaultSkill(uint256 skill) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _defaultSkill = skill;\\n    }\\n}\\n\",\"keccak256\":\"0x8e5354f55dc0cefd3dc509ce0e6b2df5c65a07f5080c96cebdc60b8f4d69e32a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614f3a806100206000396000f3fe6080604052600436106103b85760003560e01c806368428a1b116101f2578063bd880fae1161010d578063e5ca5648116100a0578063ee77a14d1161006f578063ee77a14d14610b60578063ef83303014610b94578063fbfa77cf14610bb4578063fe55932a14610bd557600080fd5b8063e5ca564814610ac1578063e9196c1e14610ad7578063e985e9c514610af7578063eaf882ff14610b4057600080fd5b8063d06b1da8116100dc578063d06b1da814610a2b578063d539139314610a4b578063d547741f14610a6d578063d57a46f614610a8d57600080fd5b8063bd880fae146109b4578063be9a6555146109d4578063c87b56dd146109e9578063cbf3b2a714610a0957600080fd5b8063932f332f11610185578063a5515c3311610154578063a5515c3314610934578063b3fa4a4c14610954578063b423f0a614610974578063b88d4fde1461099457600080fd5b8063932f332f146108b657806395d89b41146108ea578063a217fddf146108ff578063a22cb4651461091457600080fd5b80637deb6025116101c15780637deb60251461084e57806380ce97f2146108615780638129fc1c1461088157806391d148541461089657600080fd5b806368428a1b146107d45780636b8ff574146107ee57806370a082311461080e578063710546e11461082e57600080fd5b80632f745c59116102e257806348758697116102755780635ac44282116102445780635ac44282146107475780636352211e1461077457806364b2d3e4146107945780636817031b146107b457600080fd5b806348758697146106c55780634f6ccce7146106e5578063573aa7d514610705578063590ba3131461073257600080fd5b8063422627c3116102b1578063422627c31461064357806342842e0e14610663578063466a18de14610683578063477b2962146106a357600080fd5b80632f745c59146105c357806332633699146105e357806336568abe1461060357806340c10f191461062357600080fd5b80630bf8eb2c1161035a57806323b872dd1161032957806323b872dd1461053d578063248a9ca31461055d5780632ab4d0521461058d5780632f2ff15d146105a357600080fd5b80630bf8eb2c146104c857806314b710ae146104e857806316a4f84f1461050857806318160ddd1461052857600080fd5b8063076736a211610396578063076736a21461043657806307da68f51461045b578063081812fc14610470578063095ea7b3146104a857600080fd5b806301ffc9a7146103bd578063067b61f2146103f257806306fdde0314610414575b600080fd5b3480156103c957600080fd5b506103dd6103d83660046146ec565b610bf5565b60405190151581526020015b60405180910390f35b3480156103fe57600080fd5b5061041261040d3660046147a2565b610c06565b005b34801561042057600080fd5b50610429610cae565b6040516103e99190614b96565b34801561044257600080fd5b5061044d6101025481565b6040519081526020016103e9565b34801561046757600080fd5b50610412610d40565b34801561047c57600080fd5b5061049061048b3660046146ae565b610d59565b6040516001600160a01b0390911681526020016103e9565b3480156104b457600080fd5b506104126104c3366004614682565b610dee565b3480156104d457600080fd5b506104126104e33660046147c4565b610f04565b3480156104f457600080fd5b506104126105033660046146ae565b611125565b34801561051457600080fd5b50610412610523366004614848565b611138565b34801561053457600080fd5b5060995461044d565b34801561054957600080fd5b5061041261055836600461458e565b611354565b34801561056957600080fd5b5061044d6105783660046146ae565b600090815260c9602052604090206001015490565b34801561059957600080fd5b506101015461044d565b3480156105af57600080fd5b506104126105be3660046146c7565b611385565b3480156105cf57600080fd5b5061044d6105de366004614682565b6113ab565b3480156105ef57600080fd5b506104126105fe36600461481c565b611441565b34801561060f57600080fd5b5061041261061e3660046146c7565b61170f565b34801561062f57600080fd5b5061041261063e366004614682565b61178d565b34801561064f57600080fd5b5061044d61065e3660046146ae565b6117b0565b34801561066f57600080fd5b5061041261067e36600461458e565b6117e7565b34801561068f57600080fd5b5061041261069e366004614726565b611802565b3480156106af57600080fd5b506106b8611822565b6040516103e99190614ade565b3480156106d157600080fd5b5061044d6106e03660046146ae565b611931565b3480156106f157600080fd5b5061044d6107003660046146ae565b611a39565b34801561071157600080fd5b506107256107203660046146ae565b611acc565b6040516103e99190614d1b565b34801561073e57600080fd5b5060ff5461044d565b34801561075357600080fd5b506107676107623660046146ae565b611be4565b6040516103e99190614d08565b34801561078057600080fd5b5061049061078f3660046146ae565b611d89565b3480156107a057600080fd5b506104126107af3660046146ae565b611e00565b3480156107c057600080fd5b506104126107cf366004614538565b611f8a565b3480156107e057600080fd5b5060fe546103dd9060ff1681565b3480156107fa57600080fd5b506104296108093660046146ae565b611fba565b34801561081a57600080fd5b5061044d610829366004614538565b61212e565b34801561083a57600080fd5b506107676108493660046146ae565b6121b5565b61041261085c3660046146c7565b6123d0565b34801561086d57600080fd5b5061041261087c3660046146ae565b612549565b34801561088d57600080fd5b5061041261255c565b3480156108a257600080fd5b506103dd6108b13660046146c7565b6126c6565b3480156108c257600080fd5b5061044d7fbdd75cc4e6664d035b2def63bc7a5db6c1bc3e1193b04939f57fdebfb3477fa381565b3480156108f657600080fd5b506104296126f1565b34801561090b57600080fd5b5061044d600081565b34801561092057600080fd5b5061041261092f36600461464f565b612700565b34801561094057600080fd5b5061044d61094f3660046146ae565b6127c5565b34801561096057600080fd5b5061041261096f366004614682565b612972565b34801561098057600080fd5b5061041261098f3660046147a2565b612995565b3480156109a057600080fd5b506104126109af3660046145cf565b612a27565b3480156109c057600080fd5b5061044d6109cf3660046146ae565b612a5f565b3480156109e057600080fd5b50610412612ab2565b3480156109f557600080fd5b50610429610a043660046146ae565b612b7b565b348015610a1557600080fd5b50610a1e612d2b565b6040516103e99190614b40565b348015610a3757600080fd5b50610412610a463660046146ae565b612da0565b348015610a5757600080fd5b5061044d600080516020614ee583398151915281565b348015610a7957600080fd5b50610412610a883660046146c7565b612ed7565b348015610a9957600080fd5b5061044d7fde99de62ff13877bfb32892f85138aa338f091ce421c1d80a3ed7cbd389e809081565b348015610acd57600080fd5b506101005461044d565b348015610ae357600080fd5b50610412610af23660046148aa565b612efd565b348015610b0357600080fd5b506103dd610b12366004614555565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b348015610b4c57600080fd5b50610412610b5b3660046146ae565b61317c565b348015610b6c57600080fd5b5061044d7fadb1f90fb043c84ed13cea91e76d7bc7af0bfa59ad8c7e6c623c30a52b8f20a681565b348015610ba057600080fd5b50610412610baf366004614726565b61318f565b348015610bc057600080fd5b5061010754610490906001600160a01b031681565b348015610be157600080fd5b50610412610bf036600461475b565b6131af565b6000610c008261324c565b92915050565b7fbdd75cc4e6664d035b2def63bc7a5db6c1bc3e1193b04939f57fdebfb3477fa3610c318133613271565b610101548310610c5c5760405162461bcd60e51b8152600401610c5390614cd1565b60405180910390fd5b600083815260fd6020526040908190208390555183907f0441da2b6e413be5b3b10ec999aa757e9177d79199b472056c0c1668cd75431890610ca19085815260200190565b60405180910390a2505050565b606060658054610cbd90614de1565b80601f0160208091040260200160405190810160405280929190818152602001828054610ce990614de1565b8015610d365780601f10610d0b57610100808354040283529160200191610d36565b820191906000526020600020905b815481529060010190602001808311610d1957829003601f168201915b5050505050905090565b6000610d4c8133613271565b5060fe805460ff19169055565b6000818152606760205260408120546001600160a01b0316610dd25760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610c53565b506000908152606960205260409020546001600160a01b031690565b6000610df982611d89565b9050806001600160a01b0316836001600160a01b03161415610e675760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610c53565b336001600160a01b0382161480610e835750610e838133610b12565b610ef55760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610c53565b610eff83836132d5565b505050565b6000610f108133613271565b60ff5484861115610f335760405162461bcd60e51b8152600401610c5390614c49565b80156110505760005b8181101561104e5760ff8181548110610f5757610f57614e8d565b90600052602060002090600402016000015487108015610f9a575060ff8181548110610f8557610f85614e8d565b90600052602060002090600402016000015486105b80610ff6575060ff8181548110610fb357610fb3614e8d565b90600052602060002090600402016001015487118015610ff6575060ff8181548110610fe157610fe1614e8d565b90600052602060002090600402016001015486115b156110005761103c565b60405162461bcd60e51b815260206004820152601160248201527018985d18da195cc81a5b9d195c9cd958dd607a1b6044820152606401610c53565b8061104681614e1c565b915050610f3c565b505b6040805160808101825287815260208082018881529282018781526060830187905260ff8054600181018255600091909152835160049091027fe08ec2af2cfc251225e1968fd6ca21e4044f129bffa95bac3503be8bdb30a367810191825594517fe08ec2af2cfc251225e1968fd6ca21e4044f129bffa95bac3503be8bdb30a3688601559051805193949193611110937fe08ec2af2cfc251225e1968fd6ca21e4044f129bffa95bac3503be8bdb30a369909301929190910190614358565b50606082015181600301555050505050505050565b60006111318133613271565b5061010255565b60006111448133613271565b60ff54806111945760405162461bcd60e51b815260206004820152601a60248201527f73657442617463683a206261746368657320697320656d7074790000000000006044820152606401610c53565b848611156111b45760405162461bcd60e51b8152600401610c5390614c49565b60005b8181101561129657878114156111cc57611284565b60ff81815481106111df576111df614e8d565b90600052602060002090600402016000015487108015611222575060ff818154811061120d5761120d614e8d565b90600052602060002090600402016000015486105b8061127e575060ff818154811061123b5761123b614e8d565b9060005260206000209060040201600101548711801561127e575060ff818154811061126957611269614e8d565b90600052602060002090600402016001015486115b15611000575b8061128e81614e1c565b9150506111b7565b508560ff88815481106112ab576112ab614e8d565b9060005260206000209060040201600001819055508460ff88815481106112d4576112d4614e8d565b9060005260206000209060040201600101819055508360ff88815481106112fd576112fd614e8d565b90600052602060002090600402016002019080519060200190611321929190614358565b508260ff888154811061133657611336614e8d565b90600052602060002090600402016003018190555050505050505050565b61135e3382613343565b61137a5760405162461bcd60e51b8152600401610c5390614c80565b610eff83838361343a565b600082815260c960205260409020600101546113a18133613271565b610eff83836135e5565b60006113b68361212e565b82106114185760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610c53565b506001600160a01b03919091166000908152609760209081526040808320938352929052205490565b600061144d8133613271565b828411156114b75760405162461bcd60e51b815260206004820152603160248201527f7374617274546f6b656e73426f75676874206d757374206265203c3d207468616044820152701b88195b99151bdad95b9cd09bdd59da1d607a1b6064820152608401610c53565b600082116115075760405162461bcd60e51b815260206004820152601c60248201527f776569506572546f6b656e206d757374206265206e6f6e2d7a65726f000000006044820152606401610c53565b6101005480156116385760005b8181101561163657610100818154811061153057611530614e8d565b906000526020600020906003020160000154861080156115745750610100818154811061155f5761155f614e8d565b90600052602060002090600302016000015485105b806115d25750610100818154811061158e5761158e614e8d565b906000526020600020906003020160010154861180156115d2575061010081815481106115bd576115bd614e8d565b90600052602060002090600302016001015485115b156115dc57611624565b60405162461bcd60e51b815260206004820152601860248201527f696e74657273656374696f6e205f73616c6553746167657300000000000000006044820152606401610c53565b8061162e81614e1c565b915050611514565b505b6040805160608101825286815260208101868152918101858152610100805460018101825560009190915291517f45e010b9ae401e2eb71529478da8bd513a9bdc2d095a111e324f5b95c09ed87b60039093029283015591517f45e010b9ae401e2eb71529478da8bd513a9bdc2d095a111e324f5b95c09ed87c82015590517f45e010b9ae401e2eb71529478da8bd513a9bdc2d095a111e324f5b95c09ed87d909101556116e68585614d87565b6116f1906001614d3c565b61010160008282546117039190614d3c565b90915550505050505050565b6001600160a01b038116331461177f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610c53565b611789828261366b565b5050565b600080516020614ee58339815191526117a68133613271565b610eff83836136d2565b60006101015482106117d45760405162461bcd60e51b8152600401610c5390614cd1565b50600090815260fd602052604090205490565b610eff83838360405180602001604052806000815250612a27565b600061180e8133613271565b8151610eff90610103906020850190614358565b606060ff805480602002602001604051908101604052809291908181526020016000905b828210156119285783829060005260206000209060040201604051806080016040529081600082015481526020016001820154815260200160028201805461188d90614de1565b80601f01602080910402602001604051908101604052809291908181526020018280546118b990614de1565b80156119065780601f106118db57610100808354040283529160200191611906565b820191906000526020600020905b8154815290600101906020018083116118e957829003601f168201915b5050505050815260200160038201548152505081526020019060010190611846565b50505050905090565b60ff546000906119835760405162461bcd60e51b815260206004820152601b60248201527f67657442617463684279546f6b656e3a206e6f206261746368657300000000006044820152606401610c53565b60005b60ff54811015611a2e5760ff81815481106119a3576119a3614e8d565b9060005260206000209060040201600101548311806119e5575060ff81815481106119d0576119d0614e8d565b90600052602060002090600402016000015483105b156119ef57611a1c565b60ff8181548110611a0257611a02614e8d565b906000526020600020906004020160030154915050919050565b80611a2681614e1c565b915050611986565b505061010454919050565b6000611a4460995490565b8210611aa75760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610c53565b60998281548110611aba57611aba614e8d565b90600052602060002001549050919050565b611af060405180606001604052806000815260200160008152602001600081525090565b61010054611b405760405162461bcd60e51b815260206004820152601760248201527f67657453616c6553746167653a206e6f207374616765730000000000000000006044820152606401610c53565b610100548210611b925760405162461bcd60e51b815260206004820152601f60248201527f4964206d757374206265203c2073616c6520737461676573206c656e677468006044820152606401610c53565b6101008281548110611ba657611ba6614e8d565b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250509050919050565b611c0f6040518060800160405280600081526020016000815260200160608152602001600081525090565b60ff54611c555760405162461bcd60e51b815260206004820152601460248201527367657442617463683a206e6f206261746368657360601b6044820152606401610c53565b60ff548210611ca65760405162461bcd60e51b815260206004820152601960248201527f4964206d757374206265203c206261746368206c656e677468000000000000006044820152606401610c53565b60ff8281548110611cb957611cb9614e8d565b90600052602060002090600402016040518060800160405290816000820154815260200160018201548152602001600282018054611cf690614de1565b80601f0160208091040260200160405190810160405280929190818152602001828054611d2290614de1565b8015611d6f5780601f10611d4457610100808354040283529160200191611d6f565b820191906000526020600020905b815481529060010190602001808311611d5257829003601f168201915b505050505081526020016003820154815250509050919050565b6000818152606760205260408120546001600160a01b031680610c005760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610c53565b6000611e0c8133613271565b610100548210611e5e5760405162461bcd60e51b815260206004820152601e60248201527f696e646578206f7574206f662073616c65207374616765206c656e67746800006044820152606401610c53565b60006101008381548110611e7457611e74614e8d565b90600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050905080600001518160200151611ec19190614d87565b611ecc906001614d3c565b6101016000828254611ede9190614d87565b90915550506101008054611ef490600190614d87565b81548110611f0457611f04614e8d565b90600052602060002090600302016101008481548110611f2657611f26614e8d565b60009182526020909120825460039092020190815560018083015490820155600291820154910155610100805480611f6057611f60614e77565b60008281526020812060036000199093019283020181815560018101829055600201559055505050565b6000611f968133613271565b5061010780546001600160a01b0319166001600160a01b0392909216919091179055565b6060610101548210611fde5760405162461bcd60e51b8152600401610c5390614cd1565b600082815260fb602052604081208054611ff790614de1565b80601f016020809104026020016040519081016040528092919081815260200182805461202390614de1565b80156120705780601f1061204557610100808354040283529160200191612070565b820191906000526020600020905b81548152906001019060200180831161205357829003601f168201915b5050505050905080516000141561211557610105805461208f90614de1565b80601f01602080910402602001604051908101604052809291908181526020018280546120bb90614de1565b80156121085780601f106120dd57610100808354040283529160200191612108565b820191906000526020600020905b8154815290600101906020018083116120eb57829003601f168201915b5050505050915050919050565b600083815260fb60205260409020805461208f90614de1565b60006001600160a01b0382166121995760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610c53565b506001600160a01b031660009081526068602052604090205490565b6121e06040518060800160405280600081526020016000815260200160608152602001600081525090565b60ff5461222f5760405162461bcd60e51b815260206004820152601b60248201527f67657442617463684279546f6b656e3a206e6f206261746368657300000000006044820152606401610c53565b60005b60ff548110156123915760ff818154811061224f5761224f614e8d565b906000526020600020906004020160010154831180612291575060ff818154811061227c5761227c614e8d565b90600052602060002090600402016000015483105b1561229b5761237f565b60ff81815481106122ae576122ae614e8d565b906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820180546122eb90614de1565b80601f016020809104026020016040519081016040528092919081815260200182805461231790614de1565b80156123645780601f1061233957610100808354040283529160200191612364565b820191906000526020600020905b81548152906001019060200180831161234757829003601f168201915b50505050508152602001600382015481525050915050919050565b8061238981614e1c565b915050612232565b5060405162461bcd60e51b815260206004820152601360248201527218985d18da08191bd95cdb89dd08195e1a5cdd606a1b6044820152606401610c53565b60fe5460ff166124175760405162461bcd60e51b815260206004820152601260248201527153616c65206973206e6f742061637469766560701b6044820152606401610c53565b6101025482111561246a5760405162461bcd60e51b815260206004820152601d60248201527f43616e206e6f7420627579203e206d6178507572636861736553697a650000006044820152606401610c53565b34612474836127c5565b146124c15760405162461bcd60e51b815260206004820152601f60248201527f45746865722076616c75652073656e74206973206e6f7420636f7272656374006044820152606401610c53565b604080518381526001600160a01b038316602082015233917f3319bb4966eaaeb523ecad57fa1daeb3bf6e5a6e559ac95bc4ed8d2042fcaf2c910160405180910390a2610107546040516001600160a01b03909116903480156108fc02916000818181858888f1935050505015801561253e573d6000803e3d6000fd5b5061178933836136ec565b60006125558133613271565b5061010655565b600054610100900460ff1680612575575060005460ff16155b6125915760405162461bcd60e51b8152600401610c5390614bfb565b600054610100900460ff161580156125b3576000805461ffff19166101011790555b6125fa60405180604001604052806009815260200168437962657250756e6b60b81b815250604051806040016040528060048152602001632096989960e11b815250613815565b61260261389c565b61260a61389c565b61261560003361391f565b61263f7fadb1f90fb043c84ed13cea91e76d7bc7af0bfa59ad8c7e6c623c30a52b8f20a63361391f565b6126697fde99de62ff13877bfb32892f85138aa338f091ce421c1d80a3ed7cbd389e80903361391f565b6126937fbdd75cc4e6664d035b2def63bc7a5db6c1bc3e1193b04939f57fdebfb3477fa33361391f565b6126ab600080516020614ee58339815191523361391f565b60146101025580156126c3576000805461ff00191690555b50565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060668054610cbd90614de1565b6001600160a01b0382163314156127595760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610c53565b336000818152606a602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60008082116128165760405162461bcd60e51b815260206004820152601a60248201527f746f6b656e73206d757374206265206d6f7265207468656e20300000000000006044820152606401610c53565b61010054600061282560995490565b905060008061284e60405180606001604052806000815260200160008152602001600081525090565b60005b87811015612966576000935060005b868110156128ed57610100818154811061287c5761287c614e8d565b6000918252602091829020604080516060810182526003909302909101805483526001810154938301849052600201549082015293508611806128bf5750825186105b156128c9576128db565b60408301516128d89086614d3c565b94505b806128e581614e1c565b915050612860565b508361293b5760405162461bcd60e51b815260206004820152601760248201527f73616c65537461676520646f65736e27742065786973740000000000000000006044820152606401610c53565b6129458484614d3c565b9250612952600186614d3c565b94508061295e81614e1c565b915050612851565b50909695505050505050565b600080516020614ee583398151915261298b8133613271565b610eff83836136ec565b7fde99de62ff13877bfb32892f85138aa338f091ce421c1d80a3ed7cbd389e80906129c08133613271565b6101015483106129e25760405162461bcd60e51b8152600401610c5390614cd1565b600083815260fc6020526040908190208390555183907fbc118caef5b83a02ad5f988c3550437e355b0c3e999d65e0652177448b97c88690610ca19085815260200190565b612a313383613343565b612a4d5760405162461bcd60e51b8152600401610c5390614c80565b612a5984848484613929565b50505050565b6000610101548210612a835760405162461bcd60e51b8152600401610c5390614cd1565b600082815260fc6020526040902054612a9f5750506101065490565b50600090815260fc602052604090205490565b6000612abe8133613271565b60006101038054612ace90614de1565b905011612b1d5760405162461bcd60e51b815260206004820152601860248201527f5f64656661756c7455726920697320756e646566696e656400000000000000006044820152606401610c53565b610107546001600160a01b0316612b6b5760405162461bcd60e51b815260206004820152601260248201527115985d5b1d081a5cc81d5b9919599a5b995960721b6044820152606401610c53565b5060fe805460ff19166001179055565b60ff54606090612bc45760405162461bcd60e51b8152602060048201526014602482015273746f6b656e5552493a206e6f206261746368657360601b6044820152606401610c53565b60005b60ff54811015612c975760ff8181548110612be457612be4614e8d565b906000526020600020906004020160010154831180612c26575060ff8181548110612c1157612c11614e8d565b90600052602060002090600402016000015483105b15612c3057612c85565b60ff8181548110612c4357612c43614e8d565b9060005260206000209060040201600201612c5d8461395c565b604051602001612c6e929190614961565b604051602081830303815290604052915050919050565b80612c8f81614e1c565b915050612bc7565b506101038054612ca690614de1565b80601f0160208091040260200160405190810160405280929190818152602001828054612cd290614de1565b8015612d1f5780601f10612cf457610100808354040283529160200191612d1f565b820191906000526020600020905b815481529060010190602001808311612d0257829003601f168201915b50505050509050919050565b6060610100805480602002602001604051908101604052809291908181526020016000905b828210156119285783829060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505081526020019060010190612d50565b6000612dac8133613271565b60ff548210612dfd5760405162461bcd60e51b815260206004820152601b60248201527f696e646578206f7574206f662062617463686573206c656e67746800000000006044820152606401610c53565b60ff8054612e0d90600190614d87565b81548110612e1d57612e1d614e8d565b906000526020600020906004020160ff8381548110612e3e57612e3e614e8d565b906000526020600020906004020160008201548160000155600182015481600101556002820181600201908054612e7490614de1565b612e7f9291906143dc565b5060039182015491015560ff805480612e9a57612e9a614e77565b6000828152602081206004600019909301928302018181556001810182905590612ec76002830182614457565b6003820160009055505090555050565b600082815260c96020526040902060010154612ef38133613271565b610eff838361366b565b6000612f098133613271565b6101005480612f4d5760405162461bcd60e51b815260206004820152601060248201526f6261746368657320697320656d70747960801b6044820152606401610c53565b83851115612f6d5760405162461bcd60e51b8152600401610c5390614c49565b60005b818110156130535786811415612f8557613041565b6101008181548110612f9957612f99614e8d565b90600052602060002090600302016000015486108015612fdd57506101008181548110612fc857612fc8614e8d565b90600052602060002090600302016000015485105b8061303b57506101008181548110612ff757612ff7614e8d565b9060005260206000209060030201600101548611801561303b5750610100818154811061302657613026614e8d565b90600052602060002090600302016001015485115b156115dc575b8061304b81614e1c565b915050612f70565b506000610100878154811061306a5761306a614e8d565b90600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050905085856130af9190614d87565b6130ba906001614d3c565b815160208301516130cb9190614d87565b6130d6906001614d3c565b610101546130e49190614d87565b6130ee9190614d3c565b6101018190555085610100888154811061310a5761310a614e8d565b90600052602060002090600302016000018190555084610100888154811061313457613134614e8d565b90600052602060002090600302016001018190555083610100888154811061315e5761315e614e8d565b90600052602060002090600302016002018190555050505050505050565b60006131888133613271565b5061010455565b600061319b8133613271565b8151610eff90610105906020850190614358565b7fadb1f90fb043c84ed13cea91e76d7bc7af0bfa59ad8c7e6c623c30a52b8f20a66131da8133613271565b6101015483106131fc5760405162461bcd60e51b8152600401610c5390614cd1565b600083815260fb60209081526040909120835161321b92850190614358565b50827f7e632a301794d8d4a81ea7e20f37d1947158d36e66403af04ba85dd194b66f1b83604051610ca19190614b96565b60006001600160e01b03198216637965db0b60e01b1480610c005750610c0082613a5a565b61327b82826126c6565b61178957613293816001600160a01b03166014613a7f565b61329e836020613a7f565b6040516020016132af929190614a2c565b60408051601f198184030181529082905262461bcd60e51b8252610c5391600401614b96565b600081815260696020526040902080546001600160a01b0319166001600160a01b038416908117909155819061330a82611d89565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152606760205260408120546001600160a01b03166133bc5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610c53565b60006133c783611d89565b9050806001600160a01b0316846001600160a01b031614806134025750836001600160a01b03166133f784610d59565b6001600160a01b0316145b8061343257506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661344d82611d89565b6001600160a01b0316146134b55760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610c53565b6001600160a01b0382166135175760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610c53565b613522838383613c22565b61352d6000826132d5565b6001600160a01b0383166000908152606860205260408120805460019290613556908490614d87565b90915550506001600160a01b0382166000908152606860205260408120805460019290613584908490614d3c565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6135ef82826126c6565b61178957600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff191660011790556136273390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61367582826126c6565b1561178957600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b611789828260405180602001604052806000815250613c90565b61010154609954106137395760405162461bcd60e51b815260206004820152601660248201527514d85b19481a185cc8185b1c9958591e48195b99195960521b6044820152606401610c53565b6000811161377c5760405162461bcd60e51b815260206004820152601060248201526f06e6674732063616e6e6f7420626520360841b6044820152606401610c53565b610101546137938261378d60995490565b90613cc3565b11156137e15760405162461bcd60e51b815260206004820152601760248201527f45786365656473205f6d6178546f74616c537570706c790000000000000000006044820152606401610c53565b60005b81811015610eff5760006137f6613ccf565b905061380284826136d2565b508061380d81614e1c565b9150506137e4565b600054610100900460ff168061382e575060005460ff16155b61384a5760405162461bcd60e51b8152600401610c5390614bfb565b600054610100900460ff1615801561386c576000805461ffff19166101011790555b613874613d66565b61387c613d66565b6138868383613dd0565b8015610eff576000805461ff0019169055505050565b600054610100900460ff16806138b5575060005460ff16155b6138d15760405162461bcd60e51b8152600401610c5390614bfb565b600054610100900460ff161580156138f3576000805461ffff19166101011790555b6138fb613d66565b613903613d66565b61390b613d66565b80156126c3576000805461ff001916905550565b61178982826135e5565b61393484848461343a565b61394084848484613e65565b612a595760405162461bcd60e51b8152600401610c5390614ba9565b6060816139805750506040805180820190915260018152600360fc1b602082015290565b8160005b81156139aa578061399481614e1c565b91506139a39050600a83614d54565b9150613984565b60008167ffffffffffffffff8111156139c5576139c5614ea3565b6040519080825280601f01601f1916602001820160405280156139ef576020820181803683370190505b5090505b841561343257613a04600183614d87565b9150613a11600a86614e37565b613a1c906030614d3c565b60f81b818381518110613a3157613a31614e8d565b60200101906001600160f81b031916908160001a905350613a53600a86614d54565b94506139f3565b60006001600160e01b0319821663780e9d6360e01b1480610c005750610c0082613f72565b60606000613a8e836002614d68565b613a99906002614d3c565b67ffffffffffffffff811115613ab157613ab1614ea3565b6040519080825280601f01601f191660200182016040528015613adb576020820181803683370190505b509050600360fc1b81600081518110613af657613af6614e8d565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613b2557613b25614e8d565b60200101906001600160f81b031916908160001a9053506000613b49846002614d68565b613b54906001614d3c565b90505b6001811115613bcc576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613b8857613b88614e8d565b1a60f81b828281518110613b9e57613b9e614e8d565b60200101906001600160f81b031916908160001a90535060049490941c93613bc581614dca565b9050613b57565b508315613c1b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610c53565b9392505050565b613c2d838383613fc2565b6001600160a01b038316610eff57610101546099541115610eff5760405162461bcd60e51b815260206004820152601e60248201527f436f6c6c656374696f6e3a206d6178537570706c7920616368696576656400006044820152606401610c53565b613c9a838361407a565b613ca76000848484613e65565b610eff5760405162461bcd60e51b8152600401610c5390614ba9565b6000613c1b8284614d3c565b60008061010154425a613ce3600143614d87565b6040805160208101949094528301919091524060608201526080016040516020818303038152906040528051906020012060001c613d219190614e37565b90505b6000818152606760205260409020546001600160a01b031615613d6157613d4c600182614d3c565b9050610101548110613d5c575060005b613d24565b919050565b600054610100900460ff1680613d7f575060005460ff16155b613d9b5760405162461bcd60e51b8152600401610c5390614bfb565b600054610100900460ff1615801561390b576000805461ffff191661010117905580156126c3576000805461ff001916905550565b600054610100900460ff1680613de9575060005460ff16155b613e055760405162461bcd60e51b8152600401610c5390614bfb565b600054610100900460ff16158015613e27576000805461ffff19166101011790555b8251613e3a906065906020860190614358565b508151613e4e906066906020850190614358565b508015610eff576000805461ff0019169055505050565b60006001600160a01b0384163b15613f6757604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613ea9903390899088908890600401614aa1565b602060405180830381600087803b158015613ec357600080fd5b505af1925050508015613ef3575060408051601f3d908101601f19168201909252613ef091810190614709565b60015b613f4d573d808015613f21576040519150601f19603f3d011682016040523d82523d6000602084013e613f26565b606091505b508051613f455760405162461bcd60e51b8152600401610c5390614ba9565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050613432565b506001949350505050565b60006001600160e01b031982166380ac58cd60e01b1480613fa357506001600160e01b03198216635b5e139f60e01b145b80610c0057506301ffc9a760e01b6001600160e01b0319831614610c00565b6001600160a01b03831661401d5761401881609980546000838152609a60205260408120829055600182018355919091527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000155565b614040565b816001600160a01b0316836001600160a01b0316146140405761404083826141c8565b6001600160a01b03821661405757610eff81614265565b826001600160a01b0316826001600160a01b031614610eff57610eff8282614314565b6001600160a01b0382166140d05760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610c53565b6000818152606760205260409020546001600160a01b0316156141355760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610c53565b61414160008383613c22565b6001600160a01b038216600090815260686020526040812080546001929061416a908490614d3c565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600060016141d58461212e565b6141df9190614d87565b600083815260986020526040902054909150808214614232576001600160a01b03841660009081526097602090815260408083208584528252808320548484528184208190558352609890915290208190555b5060009182526098602090815260408084208490556001600160a01b039094168352609781528383209183525290812055565b60995460009061427790600190614d87565b6000838152609a60205260408120546099805493945090928490811061429f5761429f614e8d565b9060005260206000200154905080609983815481106142c0576142c0614e8d565b6000918252602080832090910192909255828152609a909152604080822084905585825281205560998054806142f8576142f8614e77565b6001900381819060005260206000200160009055905550505050565b600061431f8361212e565b6001600160a01b039093166000908152609760209081526040808320868452825280832085905593825260989052919091209190915550565b82805461436490614de1565b90600052602060002090601f01602090048101928261438657600085556143cc565b82601f1061439f57805160ff19168380011785556143cc565b828001600101855582156143cc579182015b828111156143cc5782518255916020019190600101906143b1565b506143d892915061448d565b5090565b8280546143e890614de1565b90600052602060002090601f01602090048101928261440a57600085556143cc565b82601f1061441b57805485556143cc565b828001600101855582156143cc57600052602060002091601f016020900482015b828111156143cc57825482559160010191906001019061443c565b50805461446390614de1565b6000825580601f10614473575050565b601f0160209004906000526020600020908101906126c391905b5b808211156143d8576000815560010161448e565b600067ffffffffffffffff808411156144bd576144bd614ea3565b604051601f8501601f19908116603f011681019082821181831017156144e5576144e5614ea3565b816040528093508581528686860111156144fe57600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261452957600080fd5b613c1b838335602085016144a2565b60006020828403121561454a57600080fd5b8135613c1b81614eb9565b6000806040838503121561456857600080fd5b823561457381614eb9565b9150602083013561458381614eb9565b809150509250929050565b6000806000606084860312156145a357600080fd5b83356145ae81614eb9565b925060208401356145be81614eb9565b929592945050506040919091013590565b600080600080608085870312156145e557600080fd5b84356145f081614eb9565b9350602085013561460081614eb9565b925060408501359150606085013567ffffffffffffffff81111561462357600080fd5b8501601f8101871361463457600080fd5b614643878235602084016144a2565b91505092959194509250565b6000806040838503121561466257600080fd5b823561466d81614eb9565b91506020830135801515811461458357600080fd5b6000806040838503121561469557600080fd5b82356146a081614eb9565b946020939093013593505050565b6000602082840312156146c057600080fd5b5035919050565b600080604083850312156146da57600080fd5b82359150602083013561458381614eb9565b6000602082840312156146fe57600080fd5b8135613c1b81614ece565b60006020828403121561471b57600080fd5b8151613c1b81614ece565b60006020828403121561473857600080fd5b813567ffffffffffffffff81111561474f57600080fd5b61343284828501614518565b6000806040838503121561476e57600080fd5b82359150602083013567ffffffffffffffff81111561478c57600080fd5b61479885828601614518565b9150509250929050565b600080604083850312156147b557600080fd5b50508035926020909101359150565b600080600080608085870312156147da57600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156147ff57600080fd5b61480b87828801614518565b949793965093946060013593505050565b60008060006060848603121561483157600080fd5b505081359360208301359350604090920135919050565b600080600080600060a0868803121561486057600080fd5b853594506020860135935060408601359250606086013567ffffffffffffffff81111561488c57600080fd5b61489888828901614518565b95989497509295608001359392505050565b600080600080608085870312156148c057600080fd5b5050823594602084013594506040840135936060013592509050565b600081518084526148f4816020860160208601614d9e565b601f01601f19169290920160200192915050565b6000815161491a818560208601614d9e565b9290920192915050565b8051825260208101516020830152600060408201516080604085015261494d60808501826148dc565b606093840151949093019390935250919050565b600080845481600182811c91508083168061497d57607f831692505b602080841082141561499d57634e487b7160e01b86526022600452602486fd5b8180156149b157600181146149c2576149ef565b60ff198616895284890196506149ef565b60008b81526020902060005b868110156149e75781548b8201529085019083016149ce565b505084890196505b505050505050614a23614a12614a0c83602f60f81b815260010190565b86614908565b64173539b7b760d91b815260050190565b95945050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614a64816017850160208801614d9e565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614a95816028840160208801614d9e565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090614ad4908301846148dc565b9695505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614b3357603f19888603018452614b21858351614924565b94509285019290850190600101614b05565b5092979650505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561296657614b838385518051825260208082015190830152604090810151910152565b9284019260609290920191600101614b5c565b602081526000613c1b60208301846148dc565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601d908201527f73746172744964206d757374206265203c3d207468616e20456e644964000000604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208082526017908201527f696e646578203c205f6d6178546f74616c537570706c79000000000000000000604082015260600190565b602081526000613c1b6020830184614924565b81518152602080830151908201526040808301519082015260608101610c00565b60008219821115614d4f57614d4f614e4b565b500190565b600082614d6357614d63614e61565b500490565b6000816000190483118215151615614d8257614d82614e4b565b500290565b600082821015614d9957614d99614e4b565b500390565b60005b83811015614db9578181015183820152602001614da1565b83811115612a595750506000910152565b600081614dd957614dd9614e4b565b506000190190565b600181811c90821680614df557607f821691505b60208210811415614e1657634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415614e3057614e30614e4b565b5060010190565b600082614e4657614e46614e61565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146126c357600080fd5b6001600160e01b0319811681146126c357600080fdfe9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a264697066735822122052e1034f7456ec302f6c06a7965749e05fea9142c9fa2175f470e2e24201179c64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106103b85760003560e01c806368428a1b116101f2578063bd880fae1161010d578063e5ca5648116100a0578063ee77a14d1161006f578063ee77a14d14610b60578063ef83303014610b94578063fbfa77cf14610bb4578063fe55932a14610bd557600080fd5b8063e5ca564814610ac1578063e9196c1e14610ad7578063e985e9c514610af7578063eaf882ff14610b4057600080fd5b8063d06b1da8116100dc578063d06b1da814610a2b578063d539139314610a4b578063d547741f14610a6d578063d57a46f614610a8d57600080fd5b8063bd880fae146109b4578063be9a6555146109d4578063c87b56dd146109e9578063cbf3b2a714610a0957600080fd5b8063932f332f11610185578063a5515c3311610154578063a5515c3314610934578063b3fa4a4c14610954578063b423f0a614610974578063b88d4fde1461099457600080fd5b8063932f332f146108b657806395d89b41146108ea578063a217fddf146108ff578063a22cb4651461091457600080fd5b80637deb6025116101c15780637deb60251461084e57806380ce97f2146108615780638129fc1c1461088157806391d148541461089657600080fd5b806368428a1b146107d45780636b8ff574146107ee57806370a082311461080e578063710546e11461082e57600080fd5b80632f745c59116102e257806348758697116102755780635ac44282116102445780635ac44282146107475780636352211e1461077457806364b2d3e4146107945780636817031b146107b457600080fd5b806348758697146106c55780634f6ccce7146106e5578063573aa7d514610705578063590ba3131461073257600080fd5b8063422627c3116102b1578063422627c31461064357806342842e0e14610663578063466a18de14610683578063477b2962146106a357600080fd5b80632f745c59146105c357806332633699146105e357806336568abe1461060357806340c10f191461062357600080fd5b80630bf8eb2c1161035a57806323b872dd1161032957806323b872dd1461053d578063248a9ca31461055d5780632ab4d0521461058d5780632f2ff15d146105a357600080fd5b80630bf8eb2c146104c857806314b710ae146104e857806316a4f84f1461050857806318160ddd1461052857600080fd5b8063076736a211610396578063076736a21461043657806307da68f51461045b578063081812fc14610470578063095ea7b3146104a857600080fd5b806301ffc9a7146103bd578063067b61f2146103f257806306fdde0314610414575b600080fd5b3480156103c957600080fd5b506103dd6103d83660046146ec565b610bf5565b60405190151581526020015b60405180910390f35b3480156103fe57600080fd5b5061041261040d3660046147a2565b610c06565b005b34801561042057600080fd5b50610429610cae565b6040516103e99190614b96565b34801561044257600080fd5b5061044d6101025481565b6040519081526020016103e9565b34801561046757600080fd5b50610412610d40565b34801561047c57600080fd5b5061049061048b3660046146ae565b610d59565b6040516001600160a01b0390911681526020016103e9565b3480156104b457600080fd5b506104126104c3366004614682565b610dee565b3480156104d457600080fd5b506104126104e33660046147c4565b610f04565b3480156104f457600080fd5b506104126105033660046146ae565b611125565b34801561051457600080fd5b50610412610523366004614848565b611138565b34801561053457600080fd5b5060995461044d565b34801561054957600080fd5b5061041261055836600461458e565b611354565b34801561056957600080fd5b5061044d6105783660046146ae565b600090815260c9602052604090206001015490565b34801561059957600080fd5b506101015461044d565b3480156105af57600080fd5b506104126105be3660046146c7565b611385565b3480156105cf57600080fd5b5061044d6105de366004614682565b6113ab565b3480156105ef57600080fd5b506104126105fe36600461481c565b611441565b34801561060f57600080fd5b5061041261061e3660046146c7565b61170f565b34801561062f57600080fd5b5061041261063e366004614682565b61178d565b34801561064f57600080fd5b5061044d61065e3660046146ae565b6117b0565b34801561066f57600080fd5b5061041261067e36600461458e565b6117e7565b34801561068f57600080fd5b5061041261069e366004614726565b611802565b3480156106af57600080fd5b506106b8611822565b6040516103e99190614ade565b3480156106d157600080fd5b5061044d6106e03660046146ae565b611931565b3480156106f157600080fd5b5061044d6107003660046146ae565b611a39565b34801561071157600080fd5b506107256107203660046146ae565b611acc565b6040516103e99190614d1b565b34801561073e57600080fd5b5060ff5461044d565b34801561075357600080fd5b506107676107623660046146ae565b611be4565b6040516103e99190614d08565b34801561078057600080fd5b5061049061078f3660046146ae565b611d89565b3480156107a057600080fd5b506104126107af3660046146ae565b611e00565b3480156107c057600080fd5b506104126107cf366004614538565b611f8a565b3480156107e057600080fd5b5060fe546103dd9060ff1681565b3480156107fa57600080fd5b506104296108093660046146ae565b611fba565b34801561081a57600080fd5b5061044d610829366004614538565b61212e565b34801561083a57600080fd5b506107676108493660046146ae565b6121b5565b61041261085c3660046146c7565b6123d0565b34801561086d57600080fd5b5061041261087c3660046146ae565b612549565b34801561088d57600080fd5b5061041261255c565b3480156108a257600080fd5b506103dd6108b13660046146c7565b6126c6565b3480156108c257600080fd5b5061044d7fbdd75cc4e6664d035b2def63bc7a5db6c1bc3e1193b04939f57fdebfb3477fa381565b3480156108f657600080fd5b506104296126f1565b34801561090b57600080fd5b5061044d600081565b34801561092057600080fd5b5061041261092f36600461464f565b612700565b34801561094057600080fd5b5061044d61094f3660046146ae565b6127c5565b34801561096057600080fd5b5061041261096f366004614682565b612972565b34801561098057600080fd5b5061041261098f3660046147a2565b612995565b3480156109a057600080fd5b506104126109af3660046145cf565b612a27565b3480156109c057600080fd5b5061044d6109cf3660046146ae565b612a5f565b3480156109e057600080fd5b50610412612ab2565b3480156109f557600080fd5b50610429610a043660046146ae565b612b7b565b348015610a1557600080fd5b50610a1e612d2b565b6040516103e99190614b40565b348015610a3757600080fd5b50610412610a463660046146ae565b612da0565b348015610a5757600080fd5b5061044d600080516020614ee583398151915281565b348015610a7957600080fd5b50610412610a883660046146c7565b612ed7565b348015610a9957600080fd5b5061044d7fde99de62ff13877bfb32892f85138aa338f091ce421c1d80a3ed7cbd389e809081565b348015610acd57600080fd5b506101005461044d565b348015610ae357600080fd5b50610412610af23660046148aa565b612efd565b348015610b0357600080fd5b506103dd610b12366004614555565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b348015610b4c57600080fd5b50610412610b5b3660046146ae565b61317c565b348015610b6c57600080fd5b5061044d7fadb1f90fb043c84ed13cea91e76d7bc7af0bfa59ad8c7e6c623c30a52b8f20a681565b348015610ba057600080fd5b50610412610baf366004614726565b61318f565b348015610bc057600080fd5b5061010754610490906001600160a01b031681565b348015610be157600080fd5b50610412610bf036600461475b565b6131af565b6000610c008261324c565b92915050565b7fbdd75cc4e6664d035b2def63bc7a5db6c1bc3e1193b04939f57fdebfb3477fa3610c318133613271565b610101548310610c5c5760405162461bcd60e51b8152600401610c5390614cd1565b60405180910390fd5b600083815260fd6020526040908190208390555183907f0441da2b6e413be5b3b10ec999aa757e9177d79199b472056c0c1668cd75431890610ca19085815260200190565b60405180910390a2505050565b606060658054610cbd90614de1565b80601f0160208091040260200160405190810160405280929190818152602001828054610ce990614de1565b8015610d365780601f10610d0b57610100808354040283529160200191610d36565b820191906000526020600020905b815481529060010190602001808311610d1957829003601f168201915b5050505050905090565b6000610d4c8133613271565b5060fe805460ff19169055565b6000818152606760205260408120546001600160a01b0316610dd25760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610c53565b506000908152606960205260409020546001600160a01b031690565b6000610df982611d89565b9050806001600160a01b0316836001600160a01b03161415610e675760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610c53565b336001600160a01b0382161480610e835750610e838133610b12565b610ef55760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610c53565b610eff83836132d5565b505050565b6000610f108133613271565b60ff5484861115610f335760405162461bcd60e51b8152600401610c5390614c49565b80156110505760005b8181101561104e5760ff8181548110610f5757610f57614e8d565b90600052602060002090600402016000015487108015610f9a575060ff8181548110610f8557610f85614e8d565b90600052602060002090600402016000015486105b80610ff6575060ff8181548110610fb357610fb3614e8d565b90600052602060002090600402016001015487118015610ff6575060ff8181548110610fe157610fe1614e8d565b90600052602060002090600402016001015486115b156110005761103c565b60405162461bcd60e51b815260206004820152601160248201527018985d18da195cc81a5b9d195c9cd958dd607a1b6044820152606401610c53565b8061104681614e1c565b915050610f3c565b505b6040805160808101825287815260208082018881529282018781526060830187905260ff8054600181018255600091909152835160049091027fe08ec2af2cfc251225e1968fd6ca21e4044f129bffa95bac3503be8bdb30a367810191825594517fe08ec2af2cfc251225e1968fd6ca21e4044f129bffa95bac3503be8bdb30a3688601559051805193949193611110937fe08ec2af2cfc251225e1968fd6ca21e4044f129bffa95bac3503be8bdb30a369909301929190910190614358565b50606082015181600301555050505050505050565b60006111318133613271565b5061010255565b60006111448133613271565b60ff54806111945760405162461bcd60e51b815260206004820152601a60248201527f73657442617463683a206261746368657320697320656d7074790000000000006044820152606401610c53565b848611156111b45760405162461bcd60e51b8152600401610c5390614c49565b60005b8181101561129657878114156111cc57611284565b60ff81815481106111df576111df614e8d565b90600052602060002090600402016000015487108015611222575060ff818154811061120d5761120d614e8d565b90600052602060002090600402016000015486105b8061127e575060ff818154811061123b5761123b614e8d565b9060005260206000209060040201600101548711801561127e575060ff818154811061126957611269614e8d565b90600052602060002090600402016001015486115b15611000575b8061128e81614e1c565b9150506111b7565b508560ff88815481106112ab576112ab614e8d565b9060005260206000209060040201600001819055508460ff88815481106112d4576112d4614e8d565b9060005260206000209060040201600101819055508360ff88815481106112fd576112fd614e8d565b90600052602060002090600402016002019080519060200190611321929190614358565b508260ff888154811061133657611336614e8d565b90600052602060002090600402016003018190555050505050505050565b61135e3382613343565b61137a5760405162461bcd60e51b8152600401610c5390614c80565b610eff83838361343a565b600082815260c960205260409020600101546113a18133613271565b610eff83836135e5565b60006113b68361212e565b82106114185760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610c53565b506001600160a01b03919091166000908152609760209081526040808320938352929052205490565b600061144d8133613271565b828411156114b75760405162461bcd60e51b815260206004820152603160248201527f7374617274546f6b656e73426f75676874206d757374206265203c3d207468616044820152701b88195b99151bdad95b9cd09bdd59da1d607a1b6064820152608401610c53565b600082116115075760405162461bcd60e51b815260206004820152601c60248201527f776569506572546f6b656e206d757374206265206e6f6e2d7a65726f000000006044820152606401610c53565b6101005480156116385760005b8181101561163657610100818154811061153057611530614e8d565b906000526020600020906003020160000154861080156115745750610100818154811061155f5761155f614e8d565b90600052602060002090600302016000015485105b806115d25750610100818154811061158e5761158e614e8d565b906000526020600020906003020160010154861180156115d2575061010081815481106115bd576115bd614e8d565b90600052602060002090600302016001015485115b156115dc57611624565b60405162461bcd60e51b815260206004820152601860248201527f696e74657273656374696f6e205f73616c6553746167657300000000000000006044820152606401610c53565b8061162e81614e1c565b915050611514565b505b6040805160608101825286815260208101868152918101858152610100805460018101825560009190915291517f45e010b9ae401e2eb71529478da8bd513a9bdc2d095a111e324f5b95c09ed87b60039093029283015591517f45e010b9ae401e2eb71529478da8bd513a9bdc2d095a111e324f5b95c09ed87c82015590517f45e010b9ae401e2eb71529478da8bd513a9bdc2d095a111e324f5b95c09ed87d909101556116e68585614d87565b6116f1906001614d3c565b61010160008282546117039190614d3c565b90915550505050505050565b6001600160a01b038116331461177f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610c53565b611789828261366b565b5050565b600080516020614ee58339815191526117a68133613271565b610eff83836136d2565b60006101015482106117d45760405162461bcd60e51b8152600401610c5390614cd1565b50600090815260fd602052604090205490565b610eff83838360405180602001604052806000815250612a27565b600061180e8133613271565b8151610eff90610103906020850190614358565b606060ff805480602002602001604051908101604052809291908181526020016000905b828210156119285783829060005260206000209060040201604051806080016040529081600082015481526020016001820154815260200160028201805461188d90614de1565b80601f01602080910402602001604051908101604052809291908181526020018280546118b990614de1565b80156119065780601f106118db57610100808354040283529160200191611906565b820191906000526020600020905b8154815290600101906020018083116118e957829003601f168201915b5050505050815260200160038201548152505081526020019060010190611846565b50505050905090565b60ff546000906119835760405162461bcd60e51b815260206004820152601b60248201527f67657442617463684279546f6b656e3a206e6f206261746368657300000000006044820152606401610c53565b60005b60ff54811015611a2e5760ff81815481106119a3576119a3614e8d565b9060005260206000209060040201600101548311806119e5575060ff81815481106119d0576119d0614e8d565b90600052602060002090600402016000015483105b156119ef57611a1c565b60ff8181548110611a0257611a02614e8d565b906000526020600020906004020160030154915050919050565b80611a2681614e1c565b915050611986565b505061010454919050565b6000611a4460995490565b8210611aa75760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610c53565b60998281548110611aba57611aba614e8d565b90600052602060002001549050919050565b611af060405180606001604052806000815260200160008152602001600081525090565b61010054611b405760405162461bcd60e51b815260206004820152601760248201527f67657453616c6553746167653a206e6f207374616765730000000000000000006044820152606401610c53565b610100548210611b925760405162461bcd60e51b815260206004820152601f60248201527f4964206d757374206265203c2073616c6520737461676573206c656e677468006044820152606401610c53565b6101008281548110611ba657611ba6614e8d565b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250509050919050565b611c0f6040518060800160405280600081526020016000815260200160608152602001600081525090565b60ff54611c555760405162461bcd60e51b815260206004820152601460248201527367657442617463683a206e6f206261746368657360601b6044820152606401610c53565b60ff548210611ca65760405162461bcd60e51b815260206004820152601960248201527f4964206d757374206265203c206261746368206c656e677468000000000000006044820152606401610c53565b60ff8281548110611cb957611cb9614e8d565b90600052602060002090600402016040518060800160405290816000820154815260200160018201548152602001600282018054611cf690614de1565b80601f0160208091040260200160405190810160405280929190818152602001828054611d2290614de1565b8015611d6f5780601f10611d4457610100808354040283529160200191611d6f565b820191906000526020600020905b815481529060010190602001808311611d5257829003601f168201915b505050505081526020016003820154815250509050919050565b6000818152606760205260408120546001600160a01b031680610c005760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610c53565b6000611e0c8133613271565b610100548210611e5e5760405162461bcd60e51b815260206004820152601e60248201527f696e646578206f7574206f662073616c65207374616765206c656e67746800006044820152606401610c53565b60006101008381548110611e7457611e74614e8d565b90600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050905080600001518160200151611ec19190614d87565b611ecc906001614d3c565b6101016000828254611ede9190614d87565b90915550506101008054611ef490600190614d87565b81548110611f0457611f04614e8d565b90600052602060002090600302016101008481548110611f2657611f26614e8d565b60009182526020909120825460039092020190815560018083015490820155600291820154910155610100805480611f6057611f60614e77565b60008281526020812060036000199093019283020181815560018101829055600201559055505050565b6000611f968133613271565b5061010780546001600160a01b0319166001600160a01b0392909216919091179055565b6060610101548210611fde5760405162461bcd60e51b8152600401610c5390614cd1565b600082815260fb602052604081208054611ff790614de1565b80601f016020809104026020016040519081016040528092919081815260200182805461202390614de1565b80156120705780601f1061204557610100808354040283529160200191612070565b820191906000526020600020905b81548152906001019060200180831161205357829003601f168201915b5050505050905080516000141561211557610105805461208f90614de1565b80601f01602080910402602001604051908101604052809291908181526020018280546120bb90614de1565b80156121085780601f106120dd57610100808354040283529160200191612108565b820191906000526020600020905b8154815290600101906020018083116120eb57829003601f168201915b5050505050915050919050565b600083815260fb60205260409020805461208f90614de1565b60006001600160a01b0382166121995760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610c53565b506001600160a01b031660009081526068602052604090205490565b6121e06040518060800160405280600081526020016000815260200160608152602001600081525090565b60ff5461222f5760405162461bcd60e51b815260206004820152601b60248201527f67657442617463684279546f6b656e3a206e6f206261746368657300000000006044820152606401610c53565b60005b60ff548110156123915760ff818154811061224f5761224f614e8d565b906000526020600020906004020160010154831180612291575060ff818154811061227c5761227c614e8d565b90600052602060002090600402016000015483105b1561229b5761237f565b60ff81815481106122ae576122ae614e8d565b906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820180546122eb90614de1565b80601f016020809104026020016040519081016040528092919081815260200182805461231790614de1565b80156123645780601f1061233957610100808354040283529160200191612364565b820191906000526020600020905b81548152906001019060200180831161234757829003601f168201915b50505050508152602001600382015481525050915050919050565b8061238981614e1c565b915050612232565b5060405162461bcd60e51b815260206004820152601360248201527218985d18da08191bd95cdb89dd08195e1a5cdd606a1b6044820152606401610c53565b60fe5460ff166124175760405162461bcd60e51b815260206004820152601260248201527153616c65206973206e6f742061637469766560701b6044820152606401610c53565b6101025482111561246a5760405162461bcd60e51b815260206004820152601d60248201527f43616e206e6f7420627579203e206d6178507572636861736553697a650000006044820152606401610c53565b34612474836127c5565b146124c15760405162461bcd60e51b815260206004820152601f60248201527f45746865722076616c75652073656e74206973206e6f7420636f7272656374006044820152606401610c53565b604080518381526001600160a01b038316602082015233917f3319bb4966eaaeb523ecad57fa1daeb3bf6e5a6e559ac95bc4ed8d2042fcaf2c910160405180910390a2610107546040516001600160a01b03909116903480156108fc02916000818181858888f1935050505015801561253e573d6000803e3d6000fd5b5061178933836136ec565b60006125558133613271565b5061010655565b600054610100900460ff1680612575575060005460ff16155b6125915760405162461bcd60e51b8152600401610c5390614bfb565b600054610100900460ff161580156125b3576000805461ffff19166101011790555b6125fa60405180604001604052806009815260200168437962657250756e6b60b81b815250604051806040016040528060048152602001632096989960e11b815250613815565b61260261389c565b61260a61389c565b61261560003361391f565b61263f7fadb1f90fb043c84ed13cea91e76d7bc7af0bfa59ad8c7e6c623c30a52b8f20a63361391f565b6126697fde99de62ff13877bfb32892f85138aa338f091ce421c1d80a3ed7cbd389e80903361391f565b6126937fbdd75cc4e6664d035b2def63bc7a5db6c1bc3e1193b04939f57fdebfb3477fa33361391f565b6126ab600080516020614ee58339815191523361391f565b60146101025580156126c3576000805461ff00191690555b50565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060668054610cbd90614de1565b6001600160a01b0382163314156127595760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610c53565b336000818152606a602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60008082116128165760405162461bcd60e51b815260206004820152601a60248201527f746f6b656e73206d757374206265206d6f7265207468656e20300000000000006044820152606401610c53565b61010054600061282560995490565b905060008061284e60405180606001604052806000815260200160008152602001600081525090565b60005b87811015612966576000935060005b868110156128ed57610100818154811061287c5761287c614e8d565b6000918252602091829020604080516060810182526003909302909101805483526001810154938301849052600201549082015293508611806128bf5750825186105b156128c9576128db565b60408301516128d89086614d3c565b94505b806128e581614e1c565b915050612860565b508361293b5760405162461bcd60e51b815260206004820152601760248201527f73616c65537461676520646f65736e27742065786973740000000000000000006044820152606401610c53565b6129458484614d3c565b9250612952600186614d3c565b94508061295e81614e1c565b915050612851565b50909695505050505050565b600080516020614ee583398151915261298b8133613271565b610eff83836136ec565b7fde99de62ff13877bfb32892f85138aa338f091ce421c1d80a3ed7cbd389e80906129c08133613271565b6101015483106129e25760405162461bcd60e51b8152600401610c5390614cd1565b600083815260fc6020526040908190208390555183907fbc118caef5b83a02ad5f988c3550437e355b0c3e999d65e0652177448b97c88690610ca19085815260200190565b612a313383613343565b612a4d5760405162461bcd60e51b8152600401610c5390614c80565b612a5984848484613929565b50505050565b6000610101548210612a835760405162461bcd60e51b8152600401610c5390614cd1565b600082815260fc6020526040902054612a9f5750506101065490565b50600090815260fc602052604090205490565b6000612abe8133613271565b60006101038054612ace90614de1565b905011612b1d5760405162461bcd60e51b815260206004820152601860248201527f5f64656661756c7455726920697320756e646566696e656400000000000000006044820152606401610c53565b610107546001600160a01b0316612b6b5760405162461bcd60e51b815260206004820152601260248201527115985d5b1d081a5cc81d5b9919599a5b995960721b6044820152606401610c53565b5060fe805460ff19166001179055565b60ff54606090612bc45760405162461bcd60e51b8152602060048201526014602482015273746f6b656e5552493a206e6f206261746368657360601b6044820152606401610c53565b60005b60ff54811015612c975760ff8181548110612be457612be4614e8d565b906000526020600020906004020160010154831180612c26575060ff8181548110612c1157612c11614e8d565b90600052602060002090600402016000015483105b15612c3057612c85565b60ff8181548110612c4357612c43614e8d565b9060005260206000209060040201600201612c5d8461395c565b604051602001612c6e929190614961565b604051602081830303815290604052915050919050565b80612c8f81614e1c565b915050612bc7565b506101038054612ca690614de1565b80601f0160208091040260200160405190810160405280929190818152602001828054612cd290614de1565b8015612d1f5780601f10612cf457610100808354040283529160200191612d1f565b820191906000526020600020905b815481529060010190602001808311612d0257829003601f168201915b50505050509050919050565b6060610100805480602002602001604051908101604052809291908181526020016000905b828210156119285783829060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505081526020019060010190612d50565b6000612dac8133613271565b60ff548210612dfd5760405162461bcd60e51b815260206004820152601b60248201527f696e646578206f7574206f662062617463686573206c656e67746800000000006044820152606401610c53565b60ff8054612e0d90600190614d87565b81548110612e1d57612e1d614e8d565b906000526020600020906004020160ff8381548110612e3e57612e3e614e8d565b906000526020600020906004020160008201548160000155600182015481600101556002820181600201908054612e7490614de1565b612e7f9291906143dc565b5060039182015491015560ff805480612e9a57612e9a614e77565b6000828152602081206004600019909301928302018181556001810182905590612ec76002830182614457565b6003820160009055505090555050565b600082815260c96020526040902060010154612ef38133613271565b610eff838361366b565b6000612f098133613271565b6101005480612f4d5760405162461bcd60e51b815260206004820152601060248201526f6261746368657320697320656d70747960801b6044820152606401610c53565b83851115612f6d5760405162461bcd60e51b8152600401610c5390614c49565b60005b818110156130535786811415612f8557613041565b6101008181548110612f9957612f99614e8d565b90600052602060002090600302016000015486108015612fdd57506101008181548110612fc857612fc8614e8d565b90600052602060002090600302016000015485105b8061303b57506101008181548110612ff757612ff7614e8d565b9060005260206000209060030201600101548611801561303b5750610100818154811061302657613026614e8d565b90600052602060002090600302016001015485115b156115dc575b8061304b81614e1c565b915050612f70565b506000610100878154811061306a5761306a614e8d565b90600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050905085856130af9190614d87565b6130ba906001614d3c565b815160208301516130cb9190614d87565b6130d6906001614d3c565b610101546130e49190614d87565b6130ee9190614d3c565b6101018190555085610100888154811061310a5761310a614e8d565b90600052602060002090600302016000018190555084610100888154811061313457613134614e8d565b90600052602060002090600302016001018190555083610100888154811061315e5761315e614e8d565b90600052602060002090600302016002018190555050505050505050565b60006131888133613271565b5061010455565b600061319b8133613271565b8151610eff90610105906020850190614358565b7fadb1f90fb043c84ed13cea91e76d7bc7af0bfa59ad8c7e6c623c30a52b8f20a66131da8133613271565b6101015483106131fc5760405162461bcd60e51b8152600401610c5390614cd1565b600083815260fb60209081526040909120835161321b92850190614358565b50827f7e632a301794d8d4a81ea7e20f37d1947158d36e66403af04ba85dd194b66f1b83604051610ca19190614b96565b60006001600160e01b03198216637965db0b60e01b1480610c005750610c0082613a5a565b61327b82826126c6565b61178957613293816001600160a01b03166014613a7f565b61329e836020613a7f565b6040516020016132af929190614a2c565b60408051601f198184030181529082905262461bcd60e51b8252610c5391600401614b96565b600081815260696020526040902080546001600160a01b0319166001600160a01b038416908117909155819061330a82611d89565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152606760205260408120546001600160a01b03166133bc5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610c53565b60006133c783611d89565b9050806001600160a01b0316846001600160a01b031614806134025750836001600160a01b03166133f784610d59565b6001600160a01b0316145b8061343257506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661344d82611d89565b6001600160a01b0316146134b55760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610c53565b6001600160a01b0382166135175760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610c53565b613522838383613c22565b61352d6000826132d5565b6001600160a01b0383166000908152606860205260408120805460019290613556908490614d87565b90915550506001600160a01b0382166000908152606860205260408120805460019290613584908490614d3c565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6135ef82826126c6565b61178957600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff191660011790556136273390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61367582826126c6565b1561178957600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b611789828260405180602001604052806000815250613c90565b61010154609954106137395760405162461bcd60e51b815260206004820152601660248201527514d85b19481a185cc8185b1c9958591e48195b99195960521b6044820152606401610c53565b6000811161377c5760405162461bcd60e51b815260206004820152601060248201526f06e6674732063616e6e6f7420626520360841b6044820152606401610c53565b610101546137938261378d60995490565b90613cc3565b11156137e15760405162461bcd60e51b815260206004820152601760248201527f45786365656473205f6d6178546f74616c537570706c790000000000000000006044820152606401610c53565b60005b81811015610eff5760006137f6613ccf565b905061380284826136d2565b508061380d81614e1c565b9150506137e4565b600054610100900460ff168061382e575060005460ff16155b61384a5760405162461bcd60e51b8152600401610c5390614bfb565b600054610100900460ff1615801561386c576000805461ffff19166101011790555b613874613d66565b61387c613d66565b6138868383613dd0565b8015610eff576000805461ff0019169055505050565b600054610100900460ff16806138b5575060005460ff16155b6138d15760405162461bcd60e51b8152600401610c5390614bfb565b600054610100900460ff161580156138f3576000805461ffff19166101011790555b6138fb613d66565b613903613d66565b61390b613d66565b80156126c3576000805461ff001916905550565b61178982826135e5565b61393484848461343a565b61394084848484613e65565b612a595760405162461bcd60e51b8152600401610c5390614ba9565b6060816139805750506040805180820190915260018152600360fc1b602082015290565b8160005b81156139aa578061399481614e1c565b91506139a39050600a83614d54565b9150613984565b60008167ffffffffffffffff8111156139c5576139c5614ea3565b6040519080825280601f01601f1916602001820160405280156139ef576020820181803683370190505b5090505b841561343257613a04600183614d87565b9150613a11600a86614e37565b613a1c906030614d3c565b60f81b818381518110613a3157613a31614e8d565b60200101906001600160f81b031916908160001a905350613a53600a86614d54565b94506139f3565b60006001600160e01b0319821663780e9d6360e01b1480610c005750610c0082613f72565b60606000613a8e836002614d68565b613a99906002614d3c565b67ffffffffffffffff811115613ab157613ab1614ea3565b6040519080825280601f01601f191660200182016040528015613adb576020820181803683370190505b509050600360fc1b81600081518110613af657613af6614e8d565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613b2557613b25614e8d565b60200101906001600160f81b031916908160001a9053506000613b49846002614d68565b613b54906001614d3c565b90505b6001811115613bcc576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613b8857613b88614e8d565b1a60f81b828281518110613b9e57613b9e614e8d565b60200101906001600160f81b031916908160001a90535060049490941c93613bc581614dca565b9050613b57565b508315613c1b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610c53565b9392505050565b613c2d838383613fc2565b6001600160a01b038316610eff57610101546099541115610eff5760405162461bcd60e51b815260206004820152601e60248201527f436f6c6c656374696f6e3a206d6178537570706c7920616368696576656400006044820152606401610c53565b613c9a838361407a565b613ca76000848484613e65565b610eff5760405162461bcd60e51b8152600401610c5390614ba9565b6000613c1b8284614d3c565b60008061010154425a613ce3600143614d87565b6040805160208101949094528301919091524060608201526080016040516020818303038152906040528051906020012060001c613d219190614e37565b90505b6000818152606760205260409020546001600160a01b031615613d6157613d4c600182614d3c565b9050610101548110613d5c575060005b613d24565b919050565b600054610100900460ff1680613d7f575060005460ff16155b613d9b5760405162461bcd60e51b8152600401610c5390614bfb565b600054610100900460ff1615801561390b576000805461ffff191661010117905580156126c3576000805461ff001916905550565b600054610100900460ff1680613de9575060005460ff16155b613e055760405162461bcd60e51b8152600401610c5390614bfb565b600054610100900460ff16158015613e27576000805461ffff19166101011790555b8251613e3a906065906020860190614358565b508151613e4e906066906020850190614358565b508015610eff576000805461ff0019169055505050565b60006001600160a01b0384163b15613f6757604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613ea9903390899088908890600401614aa1565b602060405180830381600087803b158015613ec357600080fd5b505af1925050508015613ef3575060408051601f3d908101601f19168201909252613ef091810190614709565b60015b613f4d573d808015613f21576040519150601f19603f3d011682016040523d82523d6000602084013e613f26565b606091505b508051613f455760405162461bcd60e51b8152600401610c5390614ba9565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050613432565b506001949350505050565b60006001600160e01b031982166380ac58cd60e01b1480613fa357506001600160e01b03198216635b5e139f60e01b145b80610c0057506301ffc9a760e01b6001600160e01b0319831614610c00565b6001600160a01b03831661401d5761401881609980546000838152609a60205260408120829055600182018355919091527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000155565b614040565b816001600160a01b0316836001600160a01b0316146140405761404083826141c8565b6001600160a01b03821661405757610eff81614265565b826001600160a01b0316826001600160a01b031614610eff57610eff8282614314565b6001600160a01b0382166140d05760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610c53565b6000818152606760205260409020546001600160a01b0316156141355760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610c53565b61414160008383613c22565b6001600160a01b038216600090815260686020526040812080546001929061416a908490614d3c565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600060016141d58461212e565b6141df9190614d87565b600083815260986020526040902054909150808214614232576001600160a01b03841660009081526097602090815260408083208584528252808320548484528184208190558352609890915290208190555b5060009182526098602090815260408084208490556001600160a01b039094168352609781528383209183525290812055565b60995460009061427790600190614d87565b6000838152609a60205260408120546099805493945090928490811061429f5761429f614e8d565b9060005260206000200154905080609983815481106142c0576142c0614e8d565b6000918252602080832090910192909255828152609a909152604080822084905585825281205560998054806142f8576142f8614e77565b6001900381819060005260206000200160009055905550505050565b600061431f8361212e565b6001600160a01b039093166000908152609760209081526040808320868452825280832085905593825260989052919091209190915550565b82805461436490614de1565b90600052602060002090601f01602090048101928261438657600085556143cc565b82601f1061439f57805160ff19168380011785556143cc565b828001600101855582156143cc579182015b828111156143cc5782518255916020019190600101906143b1565b506143d892915061448d565b5090565b8280546143e890614de1565b90600052602060002090601f01602090048101928261440a57600085556143cc565b82601f1061441b57805485556143cc565b828001600101855582156143cc57600052602060002091601f016020900482015b828111156143cc57825482559160010191906001019061443c565b50805461446390614de1565b6000825580601f10614473575050565b601f0160209004906000526020600020908101906126c391905b5b808211156143d8576000815560010161448e565b600067ffffffffffffffff808411156144bd576144bd614ea3565b604051601f8501601f19908116603f011681019082821181831017156144e5576144e5614ea3565b816040528093508581528686860111156144fe57600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261452957600080fd5b613c1b838335602085016144a2565b60006020828403121561454a57600080fd5b8135613c1b81614eb9565b6000806040838503121561456857600080fd5b823561457381614eb9565b9150602083013561458381614eb9565b809150509250929050565b6000806000606084860312156145a357600080fd5b83356145ae81614eb9565b925060208401356145be81614eb9565b929592945050506040919091013590565b600080600080608085870312156145e557600080fd5b84356145f081614eb9565b9350602085013561460081614eb9565b925060408501359150606085013567ffffffffffffffff81111561462357600080fd5b8501601f8101871361463457600080fd5b614643878235602084016144a2565b91505092959194509250565b6000806040838503121561466257600080fd5b823561466d81614eb9565b91506020830135801515811461458357600080fd5b6000806040838503121561469557600080fd5b82356146a081614eb9565b946020939093013593505050565b6000602082840312156146c057600080fd5b5035919050565b600080604083850312156146da57600080fd5b82359150602083013561458381614eb9565b6000602082840312156146fe57600080fd5b8135613c1b81614ece565b60006020828403121561471b57600080fd5b8151613c1b81614ece565b60006020828403121561473857600080fd5b813567ffffffffffffffff81111561474f57600080fd5b61343284828501614518565b6000806040838503121561476e57600080fd5b82359150602083013567ffffffffffffffff81111561478c57600080fd5b61479885828601614518565b9150509250929050565b600080604083850312156147b557600080fd5b50508035926020909101359150565b600080600080608085870312156147da57600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156147ff57600080fd5b61480b87828801614518565b949793965093946060013593505050565b60008060006060848603121561483157600080fd5b505081359360208301359350604090920135919050565b600080600080600060a0868803121561486057600080fd5b853594506020860135935060408601359250606086013567ffffffffffffffff81111561488c57600080fd5b61489888828901614518565b95989497509295608001359392505050565b600080600080608085870312156148c057600080fd5b5050823594602084013594506040840135936060013592509050565b600081518084526148f4816020860160208601614d9e565b601f01601f19169290920160200192915050565b6000815161491a818560208601614d9e565b9290920192915050565b8051825260208101516020830152600060408201516080604085015261494d60808501826148dc565b606093840151949093019390935250919050565b600080845481600182811c91508083168061497d57607f831692505b602080841082141561499d57634e487b7160e01b86526022600452602486fd5b8180156149b157600181146149c2576149ef565b60ff198616895284890196506149ef565b60008b81526020902060005b868110156149e75781548b8201529085019083016149ce565b505084890196505b505050505050614a23614a12614a0c83602f60f81b815260010190565b86614908565b64173539b7b760d91b815260050190565b95945050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614a64816017850160208801614d9e565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614a95816028840160208801614d9e565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090614ad4908301846148dc565b9695505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614b3357603f19888603018452614b21858351614924565b94509285019290850190600101614b05565b5092979650505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561296657614b838385518051825260208082015190830152604090810151910152565b9284019260609290920191600101614b5c565b602081526000613c1b60208301846148dc565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601d908201527f73746172744964206d757374206265203c3d207468616e20456e644964000000604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208082526017908201527f696e646578203c205f6d6178546f74616c537570706c79000000000000000000604082015260600190565b602081526000613c1b6020830184614924565b81518152602080830151908201526040808301519082015260608101610c00565b60008219821115614d4f57614d4f614e4b565b500190565b600082614d6357614d63614e61565b500490565b6000816000190483118215151615614d8257614d82614e4b565b500290565b600082821015614d9957614d99614e4b565b500390565b60005b83811015614db9578181015183820152602001614da1565b83811115612a595750506000910152565b600081614dd957614dd9614e4b565b506000190190565b600181811c90821680614df557607f821691505b60208210811415614e1657634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415614e3057614e30614e4b565b5060010190565b600082614e4657614e46614e61565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146126c357600080fd5b6001600160e01b0319811681146126c357600080fdfe9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a264697066735822122052e1034f7456ec302f6c06a7965749e05fea9142c9fa2175f470e2e24201179c64736f6c63430008070033",
  "devdoc": {
    "author": "NFT Legends team*",
    "kind": "dev",
    "methods": {
      "addBatch(uint256,uint256,string,uint256)": {
        "params": {
          "baseURI": "ipfs batch URI",
          "endTokenId": "index of the last batch token",
          "rarity": "batch rarity Note: batch ids can change over time and reorder as the result of batch removal",
          "startTokenId": "index of the first batch token"
        }
      },
      "addSaleStage(uint256,uint256,uint256)": {
        "params": {
          "endTokensBought": "index of the last batch token",
          "startTokensBought": "index of the first batch token",
          "weiPerToken": "price for token"
        }
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "batchesLength()": {
        "details": "Returns the length of configured batches",
        "returns": {
          "_0": "current `_batches` array length."
        }
      },
      "buy(uint256,address)": {
        "details": "Method to purchase and random available NFTs.",
        "params": {
          "nfts": "the number of tokens to buy",
          "referral": "the address of referral who invited the user to the platform"
        }
      },
      "deleteBatch(uint256)": {
        "params": {
          "batchIndex": "the index of the batch to be deteted"
        }
      },
      "deleteSaleStage(uint256)": {
        "details": "Delete sale stage by the given given index",
        "params": {
          "saleStageIndex": "index of the batch to be deleted"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getBatch(uint256)": {
        "details": "Returns the batch by its index in the array",
        "params": {
          "batchIndex": "batch index"
        },
        "returns": {
          "_0": "Batch info Note: batch ids can change over time and reorder as the result of batch removal"
        }
      },
      "getBatchByToken(uint256)": {
        "details": "Return batch by given tokenId",
        "params": {
          "tokenId": "token id"
        },
        "returns": {
          "_0": "batch structure"
        }
      },
      "getBatches()": {
        "details": "Returns all the batches",
        "returns": {
          "_0": "`_batches`."
        }
      },
      "getDna(uint256)": {
        "details": "Returns individual DNA of the NFT at index",
        "params": {
          "index": "token id"
        },
        "returns": {
          "_0": "NFT DNA"
        }
      },
      "getName(uint256)": {
        "details": "Returns name of the NFT at index",
        "params": {
          "index": "token id"
        },
        "returns": {
          "_0": "NFT name"
        }
      },
      "getRarity(uint256)": {
        "details": "Returns rarity of the NFT by token Id",
        "params": {
          "tokenId": "id of the token"
        },
        "returns": {
          "_0": "rarity"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getSaleStage(uint256)": {
        "details": "Returns the saleStage by its index",
        "params": {
          "saleStageIndex": "salestage index in the array"
        },
        "returns": {
          "_0": "info about sale stage"
        }
      },
      "getSaleStages()": {
        "details": "Returns all sale stages",
        "returns": {
          "_0": "`_saleStages`."
        }
      },
      "getSkill(uint256)": {
        "details": "Returns skill of the NFT at index",
        "params": {
          "index": "token id"
        },
        "returns": {
          "_0": "NFT skill"
        }
      },
      "getTotalPriceFor(uint256)": {
        "details": "Calculates the total price for the given number of tokens",
        "params": {
          "tokens": "number of tokens to be purchased"
        },
        "returns": {
          "_0": "summary price"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "maxTotalSupply()": {
        "details": "Returns current `_maxTotalSupply` value."
      },
      "mint(address,uint256)": {
        "details": "Mints a specific token (with known id) to the given address",
        "params": {
          "mintIndex": "the tokenId to mint",
          "to": "the receiver"
        }
      },
      "mintMultiple(address,uint256)": {
        "details": "Public method to randomly mint desired number of NFTs",
        "params": {
          "nfts": "the number of tokens to be minted",
          "to": "the receiver"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "saleStagesLength()": {
        "details": "Returns the number of configured saleStages (tokensale schedule)",
        "returns": {
          "_0": "current `_saleStages` array length"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBatch(uint256,uint256,uint256,string,uint256)": {
        "params": {
          "baseURI": "ipfs batch URI",
          "batchEndId": "index of the last batch token",
          "batchIndex": "the index of the batch to be changed",
          "batchStartId": "index of the first batch token",
          "rarity": "batch rarity Note: batch ids can change over time and reorder as the result of batch removal"
        }
      },
      "setDefaultName(string)": {
        "details": "Set default name.",
        "params": {
          "name": "new default name"
        }
      },
      "setDefaultRarity(uint256)": {
        "details": "Set defaultRarity",
        "params": {
          "rarity": "new default rarity"
        }
      },
      "setDefaultSkill(uint256)": {
        "details": "Set default skill.",
        "params": {
          "skill": "new default name"
        }
      },
      "setDefaultUri(string)": {
        "details": "Set defaultUri"
      },
      "setDna(uint256,uint256)": {
        "details": "Set or change individual token DNA"
      },
      "setMaxPurchaseSize(uint256)": {
        "details": "Set max purchase size (to avoid gas overspending)"
      },
      "setName(uint256,string)": {
        "details": "Set or change individual token name"
      },
      "setSaleStage(uint256,uint256,uint256,uint256)": {
        "params": {
          "endTokensBought": "index of the last batch token",
          "saleStageId": "index of the first sale stage token",
          "startTokensBought": "index of the first batch token",
          "weiPerToken": "price for token"
        }
      },
      "setSkill(uint256,uint256)": {
        "details": "Set or change individual token skill"
      },
      "setVault(address)": {
        "details": "Set vault",
        "params": {
          "newVault": "address to receive ethers"
        }
      },
      "start()": {
        "details": "Start tokensale process"
      },
      "stop()": {
        "details": "Stop tokensale"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "IPFS address that stores JSON with token attributes Tries to find it by batch first. If token has no batch, returns defaultUri.",
        "params": {
          "tokenId": "id of the token"
        },
        "returns": {
          "_0": "string with ipfs address to json with token attribute or URI for default token if token doesn`t exist"
        }
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "title": "Digital art collectible metaverse",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addBatch(uint256,uint256,string,uint256)": {
        "notice": "Creates the new batch for given token range"
      },
      "addSaleStage(uint256,uint256,uint256)": {
        "notice": "Add sale stage (i.e. tokensale schedule) It takes place at the end of `saleStages array`"
      },
      "deleteBatch(uint256)": {
        "notice": "Deletes batch by its id. This reorders the index of the token that was last."
      },
      "setBatch(uint256,uint256,uint256,string,uint256)": {
        "notice": "Update existing batch by its index"
      },
      "setSaleStage(uint256,uint256,uint256,uint256)": {
        "notice": "Update (rewrite) saleStage properties by index"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 413,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 416,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2145,
        "contract": "contracts/Collection.sol:Collection",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2394,
        "contract": "contracts/Collection.sol:Collection",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 482,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 484,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 488,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 492,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 496,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 502,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1298,
        "contract": "contracts/Collection.sol:Collection",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 1472,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1476,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1479,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_allTokens",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1483,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1798,
        "contract": "contracts/Collection.sol:Collection",
        "label": "__gap",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_roles",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 333,
        "contract": "contracts/Collection.sol:Collection",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2965,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_tokenName",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2969,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_tokenSkill",
        "offset": 0,
        "slot": "252",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2973,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_tokenDna",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2975,
        "contract": "contracts/Collection.sol:Collection",
        "label": "saleActive",
        "offset": 0,
        "slot": "254",
        "type": "t_bool"
      },
      {
        "astId": 3001,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_batches",
        "offset": 0,
        "slot": "255",
        "type": "t_array(t_struct(Batch)2997_storage)dyn_storage"
      },
      {
        "astId": 3005,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_saleStages",
        "offset": 0,
        "slot": "256",
        "type": "t_array(t_struct(SaleStage)2988_storage)dyn_storage"
      },
      {
        "astId": 3007,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_maxTotalSupply",
        "offset": 0,
        "slot": "257",
        "type": "t_uint256"
      },
      {
        "astId": 3009,
        "contract": "contracts/Collection.sol:Collection",
        "label": "maxPurchaseSize",
        "offset": 0,
        "slot": "258",
        "type": "t_uint256"
      },
      {
        "astId": 3011,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_defaultUri",
        "offset": 0,
        "slot": "259",
        "type": "t_string_storage"
      },
      {
        "astId": 3013,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_defaultRarity",
        "offset": 0,
        "slot": "260",
        "type": "t_uint256"
      },
      {
        "astId": 3015,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_defaultName",
        "offset": 0,
        "slot": "261",
        "type": "t_string_storage"
      },
      {
        "astId": 3017,
        "contract": "contracts/Collection.sol:Collection",
        "label": "_defaultSkill",
        "offset": 0,
        "slot": "262",
        "type": "t_uint256"
      },
      {
        "astId": 3039,
        "contract": "contracts/Collection.sol:Collection",
        "label": "vault",
        "offset": 0,
        "slot": "263",
        "type": "t_address_payable"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Batch)2997_storage)dyn_storage": {
        "base": "t_struct(Batch)2997_storage",
        "encoding": "dynamic_array",
        "label": "struct Collection.Batch[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(SaleStage)2988_storage)dyn_storage": {
        "base": "t_struct(SaleStage)2988_storage",
        "encoding": "dynamic_array",
        "label": "struct Collection.SaleStage[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Batch)2997_storage": {
        "encoding": "inplace",
        "label": "struct Collection.Batch",
        "members": [
          {
            "astId": 2990,
            "contract": "contracts/Collection.sol:Collection",
            "label": "startBatchTokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2992,
            "contract": "contracts/Collection.sol:Collection",
            "label": "endBatchTokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2994,
            "contract": "contracts/Collection.sol:Collection",
            "label": "baseURI",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2996,
            "contract": "contracts/Collection.sol:Collection",
            "label": "rarity",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/Collection.sol:Collection",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/Collection.sol:Collection",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SaleStage)2988_storage": {
        "encoding": "inplace",
        "label": "struct Collection.SaleStage",
        "members": [
          {
            "astId": 2983,
            "contract": "contracts/Collection.sol:Collection",
            "label": "startTokensBought",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2985,
            "contract": "contracts/Collection.sol:Collection",
            "label": "endTokensBought",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2987,
            "contract": "contracts/Collection.sol:Collection",
            "label": "weiPerToken",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}